(()=>{"use strict";function e(){}function t(t){return null==t?e:function(){return this.querySelector(t)}}function n(){return[]}function i(e){return null==e?n:function(){return this.querySelectorAll(e)}}function a(e){return function(){return this.matches(e)}}function o(e){return function(t){return t.matches(e)}}var s=Array.prototype.find;function r(){return this.firstElementChild}var h=Array.prototype.filter;function c(){return Array.from(this.children)}function l(e){return new Array(e.length)}function u(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function d(e,t,n,i,a,o){for(var s,r=0,h=t.length,c=o.length;r<c;++r)(s=t[r])?(s.__data__=o[r],i[r]=s):n[r]=new u(e,o[r]);for(;r<h;++r)(s=t[r])&&(a[r]=s)}function m(e,t,n,i,a,o,s){var r,h,c,l=new Map,d=t.length,m=o.length,f=new Array(d);for(r=0;r<d;++r)(h=t[r])&&(f[r]=c=s.call(h,h.__data__,r,t)+"",l.has(c)?a[r]=h:l.set(c,h));for(r=0;r<m;++r)c=s.call(e,o[r],r,o)+"",(h=l.get(c))?(i[r]=h,h.__data__=o[r],l.delete(c)):n[r]=new u(e,o[r]);for(r=0;r<d;++r)(h=t[r])&&l.get(f[r])===h&&(a[r]=h)}function f(e){return e.__data__}function p(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function g(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}u.prototype={constructor:u,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var y="http://www.w3.org/1999/xhtml";const v={svg:"http://www.w3.org/2000/svg",xhtml:y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function w(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),v.hasOwnProperty(t)?{space:v[t],local:e}:e}function b(e){return function(){this.removeAttribute(e)}}function k(e){return function(){this.removeAttributeNS(e.space,e.local)}}function T(e,t){return function(){this.setAttribute(e,t)}}function x(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function _(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function A(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function L(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function C(e){return function(){this.style.removeProperty(e)}}function S(e,t,n){return function(){this.style.setProperty(e,t,n)}}function D(e,t,n){return function(){var i=t.apply(this,arguments);null==i?this.style.removeProperty(e):this.style.setProperty(e,i,n)}}function z(e,t){return e.style.getPropertyValue(t)||L(e).getComputedStyle(e,null).getPropertyValue(t)}function M(e){return function(){delete this[e]}}function R(e,t){return function(){this[e]=t}}function I(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function E(e){return e.trim().split(/^|\s+/)}function F(e){return e.classList||new P(e)}function P(e){this._node=e,this._names=E(e.getAttribute("class")||"")}function q(e,t){for(var n=F(e),i=-1,a=t.length;++i<a;)n.add(t[i])}function B(e,t){for(var n=F(e),i=-1,a=t.length;++i<a;)n.remove(t[i])}function N(e){return function(){q(this,e)}}function O(e){return function(){B(this,e)}}function $(e,t){return function(){(t.apply(this,arguments)?q:B)(this,e)}}function V(){this.textContent=""}function H(e){return function(){this.textContent=e}}function j(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function G(){this.innerHTML=""}function X(e){return function(){this.innerHTML=e}}function W(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function U(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===y&&t.documentElement.namespaceURI===y?t.createElement(e):t.createElementNS(n,e)}}function Z(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function J(e){var t=w(e);return(t.local?Z:K)(t)}function Q(){return null}function ee(){var e=this.parentNode;e&&e.removeChild(this)}function te(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function ne(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function ie(e){return function(){var t=this.__on;if(t){for(var n,i=0,a=-1,o=t.length;i<o;++i)n=t[i],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?t.length=a:delete this.__on}}}function ae(e,t,n){return function(){var i,a=this.__on,o=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(a)for(var s=0,r=a.length;s<r;++s)if((i=a[s]).type===e.type&&i.name===e.name)return this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),void(i.value=t);this.addEventListener(e.type,o,n),i={type:e.type,name:e.name,value:t,listener:o,options:n},a?a.push(i):this.__on=[i]}}function oe(e,t,n){var i=L(e),a=i.CustomEvent;"function"==typeof a?a=new a(t,n):(a=i.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}function se(e,t){return function(){return oe(this,e,t)}}function re(e,t){return function(){return oe(this,e,t.apply(this,arguments))}}P.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var he=[null];function ce(e,t){this._groups=e,this._parents=t}function le(){return new ce([[document.documentElement]],he)}ce.prototype=le.prototype={constructor:ce,select:function(e){"function"!=typeof e&&(e=t(e));for(var n=this._groups,i=n.length,a=new Array(i),o=0;o<i;++o)for(var s,r,h=n[o],c=h.length,l=a[o]=new Array(c),u=0;u<c;++u)(s=h[u])&&(r=e.call(s,s.__data__,u,h))&&("__data__"in s&&(r.__data__=s.__data__),l[u]=r);return new ce(a,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return null==(t=e.apply(this,arguments))?[]:Array.isArray(t)?t:Array.from(t);var t}}(e):i(e);for(var t=this._groups,n=t.length,a=[],o=[],s=0;s<n;++s)for(var r,h=t[s],c=h.length,l=0;l<c;++l)(r=h[l])&&(a.push(e.call(r,r.__data__,l,h)),o.push(r));return new ce(a,o)},selectChild:function(e){return this.select(null==e?r:function(e){return function(){return s.call(this.children,e)}}("function"==typeof e?e:o(e)))},selectChildren:function(e){return this.selectAll(null==e?c:function(e){return function(){return h.call(this.children,e)}}("function"==typeof e?e:o(e)))},filter:function(e){"function"!=typeof e&&(e=a(e));for(var t=this._groups,n=t.length,i=new Array(n),o=0;o<n;++o)for(var s,r=t[o],h=r.length,c=i[o]=[],l=0;l<h;++l)(s=r[l])&&e.call(s,s.__data__,l,r)&&c.push(s);return new ce(i,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,f);var n,i=t?m:d,a=this._parents,o=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var s=o.length,r=new Array(s),h=new Array(s),c=new Array(s),l=0;l<s;++l){var u=a[l],g=o[l],y=g.length,v=p(e.call(u,u&&u.__data__,l,a)),w=v.length,b=h[l]=new Array(w),k=r[l]=new Array(w);i(u,g,b,k,c[l]=new Array(y),v,t);for(var T,x,_=0,A=0;_<w;++_)if(T=b[_]){for(_>=A&&(A=_+1);!(x=k[A])&&++A<w;);T._next=x||null}}return(r=new ce(r,a))._enter=h,r._exit=c,r},enter:function(){return new ce(this._enter||this._groups.map(l),this._parents)},exit:function(){return new ce(this._exit||this._groups.map(l),this._parents)},join:function(e,t,n){var i=this.enter(),a=this,o=this.exit();return"function"==typeof e?(i=e(i))&&(i=i.selection()):i=i.append(e+""),null!=t&&(a=t(a))&&(a=a.selection()),null==n?o.remove():n(o),i&&a?i.merge(a).order():a},merge:function(e){for(var t=e.selection?e.selection():e,n=this._groups,i=t._groups,a=n.length,o=i.length,s=Math.min(a,o),r=new Array(a),h=0;h<s;++h)for(var c,l=n[h],u=i[h],d=l.length,m=r[h]=new Array(d),f=0;f<d;++f)(c=l[f]||u[f])&&(m[f]=c);for(;h<a;++h)r[h]=n[h];return new ce(r,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var i,a=e[t],o=a.length-1,s=a[o];--o>=0;)(i=a[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=g);for(var n=this._groups,i=n.length,a=new Array(i),o=0;o<i;++o){for(var s,r=n[o],h=r.length,c=a[o]=new Array(h),l=0;l<h;++l)(s=r[l])&&(c[l]=s);c.sort(t)}return new ce(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var i=e[t],a=0,o=i.length;a<o;++a){var s=i[a];if(s)return s}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,i=t.length;n<i;++n)for(var a,o=t[n],s=0,r=o.length;s<r;++s)(a=o[s])&&e.call(a,a.__data__,s,o);return this},attr:function(e,t){var n=w(e);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==t?n.local?k:b:"function"==typeof t?n.local?A:_:n.local?x:T)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?C:"function"==typeof t?D:S)(e,t,null==n?"":n)):z(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?M:"function"==typeof t?I:R)(e,t)):this.node()[e]},classed:function(e,t){var n=E(e+"");if(arguments.length<2){for(var i=F(this.node()),a=-1,o=n.length;++a<o;)if(!i.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?$:t?N:O)(n,t))},text:function(e){return arguments.length?this.each(null==e?V:("function"==typeof e?j:H)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?G:("function"==typeof e?W:X)(e)):this.node().innerHTML},raise:function(){return this.each(U)},lower:function(){return this.each(Y)},append:function(e){var t="function"==typeof e?e:J(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,n){var i="function"==typeof e?e:J(e),a=null==n?Q:"function"==typeof n?n:t(n);return this.select((function(){return this.insertBefore(i.apply(this,arguments),a.apply(this,arguments)||null)}))},remove:function(){return this.each(ee)},clone:function(e){return this.select(e?ne:te)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var i,a,o=function(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}(e+""),s=o.length;if(!(arguments.length<2)){for(r=t?ae:ie,i=0;i<s;++i)this.each(r(o[i],t,n));return this}var r=this.node().__on;if(r)for(var h,c=0,l=r.length;c<l;++c)for(i=0,h=r[c];i<s;++i)if((a=o[i]).type===h.type&&a.name===h.name)return h.value},dispatch:function(e,t){return this.each(("function"==typeof t?re:se)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var i,a=e[t],o=0,s=a.length;o<s;++o)(i=a[o])&&(yield i)}};const ue=le;var de={value:()=>{}};function me(){for(var e,t=0,n=arguments.length,i={};t<n;++t){if(!(e=arguments[t]+"")||e in i||/[\s.]/.test(e))throw new Error("illegal type: "+e);i[e]=[]}return new fe(i)}function fe(e){this._=e}function pe(e,t){for(var n,i=0,a=e.length;i<a;++i)if((n=e[i]).name===t)return n.value}function ge(e,t,n){for(var i=0,a=e.length;i<a;++i)if(e[i].name===t){e[i]=de,e=e.slice(0,i).concat(e.slice(i+1));break}return null!=n&&e.push({name:t,value:n}),e}fe.prototype=me.prototype={constructor:fe,on:function(e,t){var n,i,a=this._,o=(i=a,(e+"").trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!i.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}}))),s=-1,r=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++s<r;)if(n=(e=o[s]).type)a[n]=ge(a[n],e.name,t);else if(null==t)for(n in a)a[n]=ge(a[n],e.name,null);return this}for(;++s<r;)if((n=(e=o[s]).type)&&(n=pe(a[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new fe(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,i,a=new Array(n),o=0;o<n;++o)a[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(i=this._[e]).length;o<n;++o)i[o].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var i=this._[e],a=0,o=i.length;a<o;++a)i[a].value.apply(t,n)}};const ye=me;var ve,we,be=0,ke=0,Te=0,xe=1e3,_e=0,Ae=0,Le=0,Ce="object"==typeof performance&&performance.now?performance:Date,Se="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function De(){return Ae||(Se(ze),Ae=Ce.now()+Le)}function ze(){Ae=0}function Me(){this._call=this._time=this._next=null}function Re(e,t,n){var i=new Me;return i.restart(e,t,n),i}function Ie(){Ae=(_e=Ce.now())+Le,be=ke=0;try{!function(){De(),++be;for(var e,t=ve;t;)(e=Ae-t._time)>=0&&t._call.call(void 0,e),t=t._next;--be}()}finally{be=0,function(){for(var e,t,n=ve,i=1/0;n;)n._call?(i>n._time&&(i=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:ve=t);we=e,Fe(i)}(),Ae=0}}function Ee(){var e=Ce.now(),t=e-_e;t>xe&&(Le-=t,_e=e)}function Fe(e){be||(ke&&(ke=clearTimeout(ke)),e-Ae>24?(e<1/0&&(ke=setTimeout(Ie,e-Ce.now()-Le)),Te&&(Te=clearInterval(Te))):(Te||(_e=Ce.now(),Te=setInterval(Ee,xe)),be=1,Se(Ie)))}function Pe(e,t,n){var i=new Me;return t=null==t?0:+t,i.restart((n=>{i.stop(),e(n+t)}),t,n),i}Me.prototype=Re.prototype={constructor:Me,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?De():+n)+(null==t?0:+t),this._next||we===this||(we?we._next=this:ve=this,we=this),this._call=e,this._time=n,Fe()},stop:function(){this._call&&(this._call=null,this._time=1/0,Fe())}};var qe=ye("start","end","cancel","interrupt"),Be=[],Ne=0,Oe=3;function $e(e,t,n,i,a,o){var s=e.__transition;if(s){if(n in s)return}else e.__transition={};!function(e,t,n){var i,a=e.__transition;function o(h){var c,l,u,d;if(1!==n.state)return r();for(c in a)if((d=a[c]).name===n.name){if(d.state===Oe)return Pe(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete a[c]):+c<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete a[c])}if(Pe((function(){n.state===Oe&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(h))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=Oe,i=new Array(u=n.tween.length),c=0,l=-1;c<u;++c)(d=n.tween[c].value.call(e,e.__data__,n.index,n.group))&&(i[++l]=d);i.length=l+1}}function s(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(r),n.state=5,1),o=-1,s=i.length;++o<s;)i[o].call(e,a);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),r())}function r(){for(var i in n.state=6,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=Re((function(e){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)}),0,n.time)}(e,n,{name:t,index:i,group:a,on:qe,tween:Be,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ne})}function Ve(e,t){var n=je(e,t);if(n.state>Ne)throw new Error("too late; already scheduled");return n}function He(e,t){var n=je(e,t);if(n.state>Oe)throw new Error("too late; already running");return n}function je(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function Ge(e,t){var n,i,a,o=e.__transition,s=!0;if(o){for(a in t=null==t?null:t+"",o)(n=o[a]).name===t?(i=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(i?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[a]):s=!1;s&&delete e.__transition}}function Xe(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}var We,Ue=180/Math.PI,Ye={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ke(e,t,n,i,a,o){var s,r,h;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(h=e*n+t*i)&&(n-=e*h,i-=t*h),(r=Math.sqrt(n*n+i*i))&&(n/=r,i/=r,h/=r),e*i<t*n&&(e=-e,t=-t,h=-h,s=-s),{translateX:a,translateY:o,rotate:Math.atan2(t,e)*Ue,skewX:Math.atan(h)*Ue,scaleX:s,scaleY:r}}function Ze(e,t,n,i){function a(e){return e.length?e.pop()+" ":""}return function(o,s){var r=[],h=[];return o=e(o),s=e(s),function(e,i,a,o,s,r){if(e!==a||i!==o){var h=s.push("translate(",null,t,null,n);r.push({i:h-4,x:Xe(e,a)},{i:h-2,x:Xe(i,o)})}else(a||o)&&s.push("translate("+a+t+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,r,h),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(a(n)+"rotate(",null,i)-2,x:Xe(e,t)})):t&&n.push(a(n)+"rotate("+t+i)}(o.rotate,s.rotate,r,h),function(e,t,n,o){e!==t?o.push({i:n.push(a(n)+"skewX(",null,i)-2,x:Xe(e,t)}):t&&n.push(a(n)+"skewX("+t+i)}(o.skewX,s.skewX,r,h),function(e,t,n,i,o,s){if(e!==n||t!==i){var r=o.push(a(o)+"scale(",null,",",null,")");s.push({i:r-4,x:Xe(e,n)},{i:r-2,x:Xe(t,i)})}else 1===n&&1===i||o.push(a(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,r,h),o=s=null,function(e){for(var t,n=-1,i=h.length;++n<i;)r[(t=h[n]).i]=t.x(e);return r.join("")}}}var Je=Ze((function(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?Ye:Ke(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),Qe=Ze((function(e){return null==e?Ye:(We||(We=document.createElementNS("http://www.w3.org/2000/svg","g")),We.setAttribute("transform",e),(e=We.transform.baseVal.consolidate())?Ke((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Ye)}),", ",")",")");function et(e,t){var n,i;return function(){var a=He(this,e),o=a.tween;if(o!==n)for(var s=0,r=(i=n=o).length;s<r;++s)if(i[s].name===t){(i=i.slice()).splice(s,1);break}a.tween=i}}function tt(e,t,n){var i,a;if("function"!=typeof n)throw new Error;return function(){var o=He(this,e),s=o.tween;if(s!==i){a=(i=s).slice();for(var r={name:t,value:n},h=0,c=a.length;h<c;++h)if(a[h].name===t){a[h]=r;break}h===c&&a.push(r)}o.tween=a}}function nt(e,t,n){var i=e._id;return e.each((function(){var e=He(this,i);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return je(e,i).value[t]}}function it(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function at(e,t){var n=Object.create(e.prototype);for(var i in t)n[i]=t[i];return n}function ot(){}var st=.7,rt=1/st,ht="\\s*([+-]?\\d+)\\s*",ct="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",lt="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ut=/^#([0-9a-f]{3,8})$/,dt=new RegExp(`^rgb\\(${ht},${ht},${ht}\\)$`),mt=new RegExp(`^rgb\\(${lt},${lt},${lt}\\)$`),ft=new RegExp(`^rgba\\(${ht},${ht},${ht},${ct}\\)$`),pt=new RegExp(`^rgba\\(${lt},${lt},${lt},${ct}\\)$`),gt=new RegExp(`^hsl\\(${ct},${lt},${lt}\\)$`),yt=new RegExp(`^hsla\\(${ct},${lt},${lt},${ct}\\)$`),vt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function wt(){return this.rgb().formatHex()}function bt(){return this.rgb().formatRgb()}function kt(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=ut.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?Tt(t):3===n?new At(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?xt(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?xt(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=dt.exec(e))?new At(t[1],t[2],t[3],1):(t=mt.exec(e))?new At(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=ft.exec(e))?xt(t[1],t[2],t[3],t[4]):(t=pt.exec(e))?xt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=gt.exec(e))?Mt(t[1],t[2]/100,t[3]/100,1):(t=yt.exec(e))?Mt(t[1],t[2]/100,t[3]/100,t[4]):vt.hasOwnProperty(e)?Tt(vt[e]):"transparent"===e?new At(NaN,NaN,NaN,0):null}function Tt(e){return new At(e>>16&255,e>>8&255,255&e,1)}function xt(e,t,n,i){return i<=0&&(e=t=n=NaN),new At(e,t,n,i)}function _t(e,t,n,i){return 1===arguments.length?((a=e)instanceof ot||(a=kt(a)),a?new At((a=a.rgb()).r,a.g,a.b,a.opacity):new At):new At(e,t,n,null==i?1:i);var a}function At(e,t,n,i){this.r=+e,this.g=+t,this.b=+n,this.opacity=+i}function Lt(){return`#${zt(this.r)}${zt(this.g)}${zt(this.b)}`}function Ct(){const e=St(this.opacity);return`${1===e?"rgb(":"rgba("}${Dt(this.r)}, ${Dt(this.g)}, ${Dt(this.b)}${1===e?")":`, ${e})`}`}function St(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function Dt(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function zt(e){return((e=Dt(e))<16?"0":"")+e.toString(16)}function Mt(e,t,n,i){return i<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new It(e,t,n,i)}function Rt(e){if(e instanceof It)return new It(e.h,e.s,e.l,e.opacity);if(e instanceof ot||(e=kt(e)),!e)return new It;if(e instanceof It)return e;var t=(e=e.rgb()).r/255,n=e.g/255,i=e.b/255,a=Math.min(t,n,i),o=Math.max(t,n,i),s=NaN,r=o-a,h=(o+a)/2;return r?(s=t===o?(n-i)/r+6*(n<i):n===o?(i-t)/r+2:(t-n)/r+4,r/=h<.5?o+a:2-o-a,s*=60):r=h>0&&h<1?0:s,new It(s,r,h,e.opacity)}function It(e,t,n,i){this.h=+e,this.s=+t,this.l=+n,this.opacity=+i}function Et(e){return(e=(e||0)%360)<0?e+360:e}function Ft(e){return Math.max(0,Math.min(1,e||0))}function Pt(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function qt(e,t,n,i,a){var o=e*e,s=o*e;return((1-3*e+3*o-s)*t+(4-6*o+3*s)*n+(1+3*e+3*o-3*s)*i+s*a)/6}it(ot,kt,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:wt,formatHex:wt,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Rt(this).formatHsl()},formatRgb:bt,toString:bt}),it(At,_t,at(ot,{brighter(e){return e=null==e?rt:Math.pow(rt,e),new At(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?st:Math.pow(st,e),new At(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new At(Dt(this.r),Dt(this.g),Dt(this.b),St(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Lt,formatHex:Lt,formatHex8:function(){return`#${zt(this.r)}${zt(this.g)}${zt(this.b)}${zt(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ct,toString:Ct})),it(It,(function(e,t,n,i){return 1===arguments.length?Rt(e):new It(e,t,n,null==i?1:i)}),at(ot,{brighter(e){return e=null==e?rt:Math.pow(rt,e),new It(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?st:Math.pow(st,e),new It(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*t,a=2*n-i;return new At(Pt(e>=240?e-240:e+120,a,i),Pt(e,a,i),Pt(e<120?e+240:e-120,a,i),this.opacity)},clamp(){return new It(Et(this.h),Ft(this.s),Ft(this.l),St(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=St(this.opacity);return`${1===e?"hsl(":"hsla("}${Et(this.h)}, ${100*Ft(this.s)}%, ${100*Ft(this.l)}%${1===e?")":`, ${e})`}`}}));const Bt=e=>()=>e;function Nt(e,t){var n=t-e;return n?function(e,t){return function(n){return e+n*t}}(e,n):Bt(isNaN(e)?t:e)}const Ot=function e(t){var n=function(e){return 1==(e=+e)?Nt:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(i){return Math.pow(e+i*t,n)}}(t,n,e):Bt(isNaN(t)?n:t)}}(t);function i(e,t){var i=n((e=_t(e)).r,(t=_t(t)).r),a=n(e.g,t.g),o=n(e.b,t.b),s=Nt(e.opacity,t.opacity);return function(t){return e.r=i(t),e.g=a(t),e.b=o(t),e.opacity=s(t),e+""}}return i.gamma=e,i}(1);function $t(e){return function(t){var n,i,a=t.length,o=new Array(a),s=new Array(a),r=new Array(a);for(n=0;n<a;++n)i=_t(t[n]),o[n]=i.r||0,s[n]=i.g||0,r[n]=i.b||0;return o=e(o),s=e(s),r=e(r),i.opacity=1,function(e){return i.r=o(e),i.g=s(e),i.b=r(e),i+""}}}$t((function(e){var t=e.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[i],o=e[i+1],s=i>0?e[i-1]:2*a-o,r=i<t-1?e[i+2]:2*o-a;return qt((n-i/t)*t,s,a,o,r)}})),$t((function(e){var t=e.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*t),a=e[(i+t-1)%t],o=e[i%t],s=e[(i+1)%t],r=e[(i+2)%t];return qt((n-i/t)*t,a,o,s,r)}}));var Vt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ht=new RegExp(Vt.source,"g");function jt(e,t){var n,i,a,o=Vt.lastIndex=Ht.lastIndex=0,s=-1,r=[],h=[];for(e+="",t+="";(n=Vt.exec(e))&&(i=Ht.exec(t));)(a=i.index)>o&&(a=t.slice(o,a),r[s]?r[s]+=a:r[++s]=a),(n=n[0])===(i=i[0])?r[s]?r[s]+=i:r[++s]=i:(r[++s]=null,h.push({i:s,x:Xe(n,i)})),o=Ht.lastIndex;return o<t.length&&(a=t.slice(o),r[s]?r[s]+=a:r[++s]=a),r.length<2?h[0]?function(e){return function(t){return e(t)+""}}(h[0].x):function(e){return function(){return e}}(t):(t=h.length,function(e){for(var n,i=0;i<t;++i)r[(n=h[i]).i]=n.x(e);return r.join("")})}function Gt(e,t){var n;return("number"==typeof t?Xe:t instanceof kt?Ot:(n=kt(t))?(t=n,Ot):jt)(e,t)}function Xt(e){return function(){this.removeAttribute(e)}}function Wt(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ut(e,t,n){var i,a,o=n+"";return function(){var s=this.getAttribute(e);return s===o?null:s===i?a:a=t(i=s,n)}}function Yt(e,t,n){var i,a,o=n+"";return function(){var s=this.getAttributeNS(e.space,e.local);return s===o?null:s===i?a:a=t(i=s,n)}}function Kt(e,t,n){var i,a,o;return function(){var s,r,h=n(this);if(null!=h)return(s=this.getAttribute(e))===(r=h+"")?null:s===i&&r===a?o:(a=r,o=t(i=s,h));this.removeAttribute(e)}}function Zt(e,t,n){var i,a,o;return function(){var s,r,h=n(this);if(null!=h)return(s=this.getAttributeNS(e.space,e.local))===(r=h+"")?null:s===i&&r===a?o:(a=r,o=t(i=s,h));this.removeAttributeNS(e.space,e.local)}}function Jt(e,t){var n,i;function a(){var a=t.apply(this,arguments);return a!==i&&(n=(i=a)&&function(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}(e,a)),n}return a._value=t,a}function Qt(e,t){var n,i;function a(){var a=t.apply(this,arguments);return a!==i&&(n=(i=a)&&function(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}(e,a)),n}return a._value=t,a}function en(e,t){return function(){Ve(this,e).delay=+t.apply(this,arguments)}}function tn(e,t){return t=+t,function(){Ve(this,e).delay=t}}function nn(e,t){return function(){He(this,e).duration=+t.apply(this,arguments)}}function an(e,t){return t=+t,function(){He(this,e).duration=t}}var on=ue.prototype.constructor;function sn(e){return function(){this.style.removeProperty(e)}}var rn=0;function hn(e,t,n,i){this._groups=e,this._parents=t,this._name=n,this._id=i}function cn(){return++rn}var ln=ue.prototype;hn.prototype=function(e){return ue().transition(e)}.prototype={constructor:hn,select:function(e){var n=this._name,i=this._id;"function"!=typeof e&&(e=t(e));for(var a=this._groups,o=a.length,s=new Array(o),r=0;r<o;++r)for(var h,c,l=a[r],u=l.length,d=s[r]=new Array(u),m=0;m<u;++m)(h=l[m])&&(c=e.call(h,h.__data__,m,l))&&("__data__"in h&&(c.__data__=h.__data__),d[m]=c,$e(d[m],n,i,m,d,je(h,i)));return new hn(s,this._parents,n,i)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=i(e));for(var a=this._groups,o=a.length,s=[],r=[],h=0;h<o;++h)for(var c,l=a[h],u=l.length,d=0;d<u;++d)if(c=l[d]){for(var m,f=e.call(c,c.__data__,d,l),p=je(c,n),g=0,y=f.length;g<y;++g)(m=f[g])&&$e(m,t,n,g,f,p);s.push(f),r.push(c)}return new hn(s,r,t,n)},selectChild:ln.selectChild,selectChildren:ln.selectChildren,filter:function(e){"function"!=typeof e&&(e=a(e));for(var t=this._groups,n=t.length,i=new Array(n),o=0;o<n;++o)for(var s,r=t[o],h=r.length,c=i[o]=[],l=0;l<h;++l)(s=r[l])&&e.call(s,s.__data__,l,r)&&c.push(s);return new hn(i,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,i=t.length,a=n.length,o=Math.min(i,a),s=new Array(i),r=0;r<o;++r)for(var h,c=t[r],l=n[r],u=c.length,d=s[r]=new Array(u),m=0;m<u;++m)(h=c[m]||l[m])&&(d[m]=h);for(;r<i;++r)s[r]=t[r];return new hn(s,this._parents,this._name,this._id)},selection:function(){return new on(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=cn(),i=this._groups,a=i.length,o=0;o<a;++o)for(var s,r=i[o],h=r.length,c=0;c<h;++c)if(s=r[c]){var l=je(s,t);$e(s,e,n,c,r,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new hn(i,this._parents,e,n)},call:ln.call,nodes:ln.nodes,node:ln.node,size:ln.size,empty:ln.empty,each:ln.each,on:function(e,t){var n=this._id;return arguments.length<2?je(this.node(),n).on.on(e):this.each(function(e,t,n){var i,a,o=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Ve:He;return function(){var s=o(this,e),r=s.on;r!==i&&(a=(i=r).copy()).on(t,n),s.on=a}}(n,e,t))},attr:function(e,t){var n=w(e),i="transform"===n?Qe:Gt;return this.attrTween(e,"function"==typeof t?(n.local?Zt:Kt)(n,i,nt(this,"attr."+e,t)):null==t?(n.local?Wt:Xt)(n):(n.local?Yt:Ut)(n,i,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var i=w(e);return this.tween(n,(i.local?Jt:Qt)(i,t))},style:function(e,t,n){var i="transform"==(e+="")?Je:Gt;return null==t?this.styleTween(e,function(e,t){var n,i,a;return function(){var o=z(this,e),s=(this.style.removeProperty(e),z(this,e));return o===s?null:o===n&&s===i?a:a=t(n=o,i=s)}}(e,i)).on("end.style."+e,sn(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var i,a,o;return function(){var s=z(this,e),r=n(this),h=r+"";return null==r&&(this.style.removeProperty(e),h=r=z(this,e)),s===h?null:s===i&&h===a?o:(a=h,o=t(i=s,r))}}(e,i,nt(this,"style."+e,t))).each(function(e,t){var n,i,a,o,s="style."+t,r="end."+s;return function(){var h=He(this,e),c=h.on,l=null==h.value[s]?o||(o=sn(t)):void 0;c===n&&a===l||(i=(n=c).copy()).on(r,a=l),h.on=i}}(this._id,e)):this.styleTween(e,function(e,t,n){var i,a,o=n+"";return function(){var s=z(this,e);return s===o?null:s===i?a:a=t(i=s,n)}}(e,i,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var i="style."+(e+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==t)return this.tween(i,null);if("function"!=typeof t)throw new Error;return this.tween(i,function(e,t,n){var i,a;function o(){var o=t.apply(this,arguments);return o!==a&&(i=(a=o)&&function(e,t,n){return function(i){this.style.setProperty(e,t.call(this,i),n)}}(e,o,n)),i}return o._value=t,o}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(nt(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,function(e){var t,n;function i(){var i=e.apply(this,arguments);return i!==n&&(t=(n=i)&&function(e){return function(t){this.textContent=e.call(this,t)}}(i)),t}return i._value=e,i}(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var i,a=je(this.node(),n).tween,o=0,s=a.length;o<s;++o)if((i=a[o]).name===e)return i.value;return null}return this.each((null==t?et:tt)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?en:tn)(t,e)):je(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?nn:an)(t,e)):je(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){He(this,e).ease=t}}(t,e)):je(this.node(),t).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;He(this,e).ease=n}}(this._id,e))},end:function(){var e,t,n=this,i=n._id,a=n.size();return new Promise((function(o,s){var r={value:s},h={value:function(){0==--a&&o()}};n.each((function(){var n=He(this,i),a=n.on;a!==e&&((t=(e=a).copy())._.cancel.push(r),t._.interrupt.push(r),t._.end.push(h)),n.on=t})),0===a&&o()}))},[Symbol.iterator]:ln[Symbol.iterator]};var un={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function dn(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}ue.prototype.interrupt=function(e){return this.each((function(){Ge(this,e)}))},ue.prototype.transition=function(e){var t,n;e instanceof hn?(t=e._id,e=e._name):(t=cn(),(n=un).time=De(),e=null==e?null:e+"");for(var i=this._groups,a=i.length,o=0;o<a;++o)for(var s,r=i[o],h=r.length,c=0;c<h;++c)(s=r[c])&&$e(s,e,t,c,r,n||dn(s,t));return new hn(i,this._parents,e,t)};const{abs:mn,max:fn,min:pn}=Math;function gn(e){return{type:e}}function yn(e){var t=0,n=e.children,i=n&&n.length;if(i)for(;--i>=0;)t+=n[i].value;else t=1;e.value=t}function vn(e,t){e instanceof Map?(e=[void 0,e],void 0===t&&(t=bn)):void 0===t&&(t=wn);for(var n,i,a,o,s,r=new xn(e),h=[r];n=h.pop();)if((a=t(n.data))&&(s=(a=Array.from(a)).length))for(n.children=a,o=s-1;o>=0;--o)h.push(i=a[o]=new xn(a[o])),i.parent=n,i.depth=n.depth+1;return r.eachBefore(Tn)}function wn(e){return e.children}function bn(e){return Array.isArray(e)?e[1]:null}function kn(e){void 0!==e.data.value&&(e.value=e.data.value),e.data=e.data.data}function Tn(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function xn(e){this.data=e,this.depth=this.height=0,this.parent=null}function _n(e,t){return e.parent===t.parent?1:2}function An(e){var t=e.children;return t?t[0]:e.t}function Ln(e){var t=e.children;return t?t[t.length-1]:e.t}function Cn(e,t,n){var i=n/(t.i-e.i);t.c-=i,t.s+=n,e.c+=i,t.z+=n,t.m+=n}function Sn(e,t,n){return e.a.parent===t.parent?e.a:n}function Dn(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}function zn(e){return"string"==typeof e?new ce([[document.querySelector(e)]],[document.documentElement]):new ce([[e]],he)}["w","e"].map(gn),["n","s"].map(gn),["n","w","e","s","nw","ne","sw","se"].map(gn),xn.prototype=vn.prototype={constructor:xn,count:function(){return this.eachAfter(yn)},each:function(e,t){let n=-1;for(const i of this)e.call(t,i,++n,this);return this},eachAfter:function(e,t){for(var n,i,a,o=this,s=[o],r=[],h=-1;o=s.pop();)if(r.push(o),n=o.children)for(i=0,a=n.length;i<a;++i)s.push(n[i]);for(;o=r.pop();)e.call(t,o,++h,this);return this},eachBefore:function(e,t){for(var n,i,a=this,o=[a],s=-1;a=o.pop();)if(e.call(t,a,++s,this),n=a.children)for(i=n.length-1;i>=0;--i)o.push(n[i]);return this},find:function(e,t){let n=-1;for(const i of this)if(e.call(t,i,++n,this))return i},sum:function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,i=t.children,a=i&&i.length;--a>=0;)n+=i[a].value;t.value=n}))},sort:function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),i=t.ancestors(),a=null;for(e=n.pop(),t=i.pop();e===t;)a=e,e=n.pop(),t=i.pop();return a}(t,e),i=[t];t!==n;)t=t.parent,i.push(t);for(var a=i.length;e!==n;)i.splice(a,0,e),e=e.parent;return i},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){return Array.from(this)},leaves:function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e},links:function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t},copy:function(){return vn(this).eachBefore(kn)},[Symbol.iterator]:function*(){var e,t,n,i,a=this,o=[a];do{for(e=o.reverse(),o=[];a=e.pop();)if(yield a,t=a.children)for(n=0,i=t.length;n<i;++n)o.push(t[n])}while(o.length)}},Dn.prototype=Object.create(xn.prototype);const Mn={capture:!0,passive:!1};function Rn(e){e.preventDefault(),e.stopImmediatePropagation()}function In(e){return((e=Math.exp(e))+1/e)/2}const En=function e(t,n,i){function a(e,a){var o,s,r=e[0],h=e[1],c=e[2],l=a[0],u=a[1],d=a[2],m=l-r,f=u-h,p=m*m+f*f;if(p<1e-12)s=Math.log(d/c)/t,o=function(e){return[r+e*m,h+e*f,c*Math.exp(t*e*s)]};else{var g=Math.sqrt(p),y=(d*d-c*c+i*p)/(2*c*n*g),v=(d*d-c*c-i*p)/(2*d*n*g),w=Math.log(Math.sqrt(y*y+1)-y),b=Math.log(Math.sqrt(v*v+1)-v);s=(b-w)/t,o=function(e){var i,a=e*s,o=In(w),l=c/(n*g)*(o*(i=t*a+w,((i=Math.exp(2*i))-1)/(i+1))-function(e){return((e=Math.exp(e))-1/e)/2}(w));return[r+l*m,h+l*f,c*o/In(t*a+w)]}}return o.duration=1e3*s*t/Math.SQRT2,o}return a.rho=function(t){var n=Math.max(.001,+t),i=n*n;return e(n,i,i*i)},a}(Math.SQRT2,2,4);function Fn(e,t){if(e=function(e){let t;for(;t=e.sourceEvent;)e=t;return e}(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var i=n.createSVGPoint();return i.x=e.clientX,i.y=e.clientY,[(i=i.matrixTransform(t.getScreenCTM().inverse())).x,i.y]}if(t.getBoundingClientRect){var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}}return[e.pageX,e.pageY]}const Pn=e=>()=>e;function qn(e,{sourceEvent:t,target:n,transform:i,dispatch:a}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:i,enumerable:!0,configurable:!0},_:{value:a}})}function Bn(e,t,n){this.k=e,this.x=t,this.y=n}Bn.prototype={constructor:Bn,scale:function(e){return 1===e?this:new Bn(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Bn(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Nn=new Bn(1,0,0);function On(e){e.stopImmediatePropagation()}function $n(e){e.preventDefault(),e.stopImmediatePropagation()}function Vn(e){return!(e.ctrlKey&&"wheel"!==e.type||e.button)}function Hn(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function jn(){return this.__zoom||Nn}function Gn(e){return-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*(e.ctrlKey?10:1)}function Xn(){return navigator.maxTouchPoints||"ontouchstart"in this}function Wn(e,t,n){var i=e.invertX(t[0][0])-n[0][0],a=e.invertX(t[1][0])-n[1][0],o=e.invertY(t[0][1])-n[0][1],s=e.invertY(t[1][1])-n[1][1];return e.translate(a>i?(i+a)/2:Math.min(0,i)||Math.max(0,a),s>o?(o+s)/2:Math.min(0,o)||Math.max(0,s))}Bn.prototype;class Un{constructor(e,t,n,i,a,o,s,r,h){this.visible=!0,this.childCollapses=!1,this.selected=!1,this.id=e,this.titles=t,this.summary=n,this.count=i,this.medianLikes=a,this.avgLikes=o,this.maxLikes=s,this.commentRms=r,this.children=h}getChildren(){return this.children}toggleChildrenVisible(e){void 0===e&&(e=!this.childCollapses),this.childCollapses=e;for(const t of this.children)t.visible=!e,t.toggleChildrenVisible(e)}visit(e){e(this);for(const t of this.children)t.visit(e)}}const Yn=function e(t){var n;return new Un(t.id,t.titles,t.summary,t.count,t.medianLikes,t.avgLikes,t.maxLikes,t.commentRms,(null!==(n=t.children)&&void 0!==n?n:[]).map(e))}({count:506,medianLikes:7,avgLikes:12,maxLikes:105,commentRms:25.7,titles:["Opinions on Various Topics","Assorted Opinions","Assorted Political Comments","Assorted Political Commentaries","Varied Political Discussions"],summary:'The comments from this author can be summarized into a few main themes. First, the author expresses concern over the disproportionate amount of power held by liberal and progressive elites within the Democratic party, particularly those in journalism and academia. The author worries that this could push these elites further away from the average Democratic voter and create opportunities for right-wing populists to exploit. \n\nSecond, the author provides insights into topics ranging from the decline of atheism on the internet, to the sophistication of comments on various substacks, to the potential of a muscular welfare state to improve capitalism. They also offer recommendations, such as urging readers to check out a Vanity Fair article on the current "thought leadership" of the American right. \n\nFinally, the author provides analysis and suggestions on matters related to policy and finance. For instance, they suggest that the debt ceiling is unconstitutional and that a platinum coin fallback could be a potential solution to prevent global financial meltdown in the event of a judiciary decision against the Treasury. Throughout their comments, the author utilizes precise language and detailed analysis to provide readers with thoughtful insights.',id:"branch1010",children:[{count:161,medianLikes:5,avgLikes:8,maxLikes:53,commentRms:23.9,titles:["Financial Commentary","Financial Commentary","Financial Commentary","Financial and Economic Discussions","Financial and Economic Comments"],summary:"The author of these comments covers a wide range of topics from finance, politics, and food production. Regarding finance, the author comments on the collapse of FTX and crypto in general, highlighting the lack of regulation and connection to the real economy in the toy financial system. In politics, the author criticizes the GOP for their lack of strategy in cutting spending and their potential role in leading the US into a financial crisis. The author also suggests a solution to the debt ceiling issue in the form of a platinum coin fallback. The author's comments on food production relate to the decrease in egg prices due to the end of the bird flu outbreak and the increase in refining costs contributing to higher gasoline prices. Overall, the author provides nuanced and informed opinions on a variety of topics.",id:"branch1006",children:[{count:18,medianLikes:3,avgLikes:7.1,maxLikes:32,commentRms:17.4,titles:["Debt Ceiling Discussions","Debt Ceiling Discussions","Debt ceiling and financial markets","Debt Ceiling Discussions","Debt Ceiling Discussions"],summary:"The comments include a range of views on the debt ceiling and how to address it. Some commenters propose using premium bonds to solve the problem, while others suggest challenging the constitutionality of the debt ceiling or using a platinum coin as a fail-safe. Many of the commenters express concern about the potential consequences of not raising the debt ceiling, which they see as a matter of global financial stability. The Treasury market, in particular, is viewed as highly significant and vulnerable to disruption. Some commenters suggest that the debt ceiling issue reflects a broader problem with the US fiscal system and advocate for a more unified fiscal policy. Finally, some commenters discuss the role of the US dollar in global trade and financing, including its status as the premiere funding currency, and the benefits and costs associated with its use as a global reserve currency.",id:"leaf963",children:[]},{count:18,medianLikes:4,avgLikes:6.8,maxLikes:27,commentRms:20.1,titles:["SVB Collapse Discussion","SVB Collapse Discussion","SVB Collapse-related Comments","SVB Collapse Discussions","SVB Collapse Comments"],summary:"The author of these comments provides a range of insights into the current crisis of SVB and broader banking regulations. They argue that focusing solely on aspects like deregulation is likely a mistake, and that there are multiple regulations and constraints that banks operate under. These mostly revolve around ensuring that banks have enough high quality, liquid assets to cover their liabilities, which in turn impact their lending and investment activities. \n\nThe author is also skeptical of potential bailouts, believing that the FDIC and associated agencies are well-equipped to stabilize the situation and that startups should have anticipated the risk of forgoing treasury operations by banking with SVB. They argue that future startups may be incentivized to implement basic treasury operations in light of the crisis. Overall, they suggest that there may be more regulation on bank balance sheets than some conspiracy theorists suggest, and that a range of financial services alternatives exist that give savers more upside and exposure to investment risks.",id:"leaf971",children:[]},{count:18,medianLikes:4.5,avgLikes:8.1,maxLikes:34,commentRms:18.7,titles:["FTX Bankruptcy Discussion","FTX Bankruptcy Discussion","FTX Bankruptcy Coverage","FTX Bankruptcy Comments","FTX Bankruptcy Coverage"],summary:'The author expresses a strong opinion on the FTX bankruptcy case, describing it as extreme negligence and outright criminal fraud. They criticize FTX\'s balance sheet, stating that it is impossible for FTX to fulfill its liabilities, especially with its overvalued assets. They also mention several articles and podcasts that discuss the FTX case.\n\nThe author presents an interesting argument about the nature of the crypto industry, calling it a "toy financial system" that was never connected to the real economy nor based on hard assets. They argue that the financial value assigned to crypto assets was entirely speculation about future utility. They further highlight the benefits of having a contained financial system that can serve as an outlet for financial gambling.\n\nFinally, the author also briefly discusses the issues of insider trading and accountability during the financial crisis. They argue that while there was accountability for the banks in the form of Dodd-Frank regulations, it was hard to hold anyone individually accountable because no one was breaking the law.',id:"leaf993",children:[]},{count:26,medianLikes:4.5,avgLikes:5.2,maxLikes:24,commentRms:18.7,titles:["Inflation Discussion Group","Inflation Discussion Group","Inflation Discussion","Macroeconomic Policy Discussions","Inflation Discussion Group"],summary:"The author of these comments seems to be interested in macroeconomic policy and the actions of the Federal Reserve. They express a desire to understand different approaches and critique the reasoning behind them, particularly in the case of NGDP targeting. They also discuss the impact of inflation on workers' wages and advocate for pragmatic solutions to managing COVID-19 while also normalizing the goods/services spending balance. Additionally, they provide insights into the Fed's use of inflation forecasts to guide monetary policy and point out the difficulties of predicting the trajectory of inflation during periods of high economic volatility. The author also stresses the importance of maintaining central bank credibility and explains why a loss of credibility can lead to economic volatility and pain. Finally, they offer context to understand why the Fed is projecting restrictive monetary policy throughout 2023 and why the Fed is not declaring victory on inflation.",id:"leaf991",children:[]},{count:81,medianLikes:6,avgLikes:9.4,maxLikes:53,commentRms:22.2,titles:["Political Analysis","Political Analysis","Political Commentary","Political Analysis","Inflation and Economic Policy"],summary:"The author holds various political views regarding the Republican Party, climate change, entitlement reform, the Democratic Party, electoral politics, and DeSantis' potential presidency. Firstly, the author believes that Republicans do not have real plans for addressing inflation and instead attack Democrats' policies. Secondly, the author believes that climate change issues cannot be solved by taking actions at the intersection of finance and climate, which needs good policy to work within the current political reality. Thirdly, the author argues that Democrats need to expand their tax base and redirect resources from private consumption so that they can build a strong welfare state. Fourthly, the author suggested that Adam Tooze’s 2018 book “Crashed” provides a good coverage of the insane politicking around the TARP legislation. Fifthly, the author thinks that Trump will be a defining feature in the Republican primary and will instruct his supporters to refrain from voting in the general election.",id:"branch998",children:[{count:16,medianLikes:5,avgLikes:5.7,maxLikes:22,commentRms:18.6,titles:["TARP and Fed Discussions","TARP and Fed Discussions","TARP and Fed Discussions","TARP and Fed Discussions","TARP and Fed Policy"],summary:"The author has shared multiple comments on different topics, including the government's response to the financial crisis of 2008 and criticism of certain politicians and policy decisions. In one comment, they express support for political leaders who took action to prevent a total market meltdown during the crisis, praising Pelosi's leadership and criticizing Republican opposition to the TARP bailout. Another comment discusses the potential consequences of a stronger Tea Party movement in response to a larger government stimulus package in 2009 and the possible repudiation of Obama's political strategy. \n\nThe author also provides commentary on economic policy in general, including the Federal Reserve's recent hawkish pivot and democratic politicians' criticism of monetary policy. They express some skepticism about specific figures, such as Summers and Yellen, and suggest that certain criticisms of them may be based on misconceptions. They also question whether the recent leak about Yellen's initial concerns with the size of the ARP may be an attempt to scapegoat her for current inflation issues.",id:"leaf972",children:[]},{count:39,medianLikes:7,avgLikes:11.6,maxLikes:53,commentRms:19.9,titles:["Political Party Critiques","Different Views on Democratic Strategies","Political Analysis","Democrats and Working Class","Political Analysis"],summary:"The author of these comments has a range of opinions on various political issues. They express concern that the Democrats are not doing enough to address the issue of inflation which is considered the number one issue for many voters. They believe that the Democrats need to develop a serious plan to address inflation, such as Skanda Amarnath’s plan to rapidly expand the supply of key commodities, chiefly energy, to counter the narrative that the Republicans offer better economic policy. \n\nIn addition to this, the author expresses their views on the idea of cutting entitlements and the effects of tax reform. They argue that people in the Democratic party, particularly the upper-middle class, are prioritizing their interests over those of the working class, making it difficult to increase taxes on the merely affluent to expand the welfare state. The author also has a strong interest in historical and political analysis, providing insights into specific events such as the nullification crisis faced by Andrew Jackson and the contentious presidential election of 1876. \n\nOverall, the author appears to be an engaged and politically-aware individual, sharing nuanced insights and critiques of different political ideas and actions. While they are critical of some aspects of the Democratic party, they do not align themselves explicitly with any one party or ideology, and instead offer their own independent perspectives on the issues at hand.",id:"leaf985",children:[]},{count:11,medianLikes:6,avgLikes:10.6,maxLikes:53,commentRms:14.3,titles:["Domestic Fossil Fuel Policy","Domestic Energy Policy","Fossil Fuel Policy Debate","Fossil Fuel Policy Discussion","Domestic Energy Policy"],summary:"The author of these comments emphasizes the need for a transition away from fossil fuels towards green energy but also recognizes the challenge of maintaining political and economic stability during this transition. The author argues that fighting against the domestic oil and gas industry is a counterproductive approach, and instead advocates for policies that both accelerate the green transition and promote a healthy respect for the domestic oil and gas industry. The author suggests policies like decreasing oil volatility by expanding the strategic petroleum reserve, and making loans to oil and gas firms for increasing production and processing capacity. The author acknowledges the constraints of political reality, including the need to consider the price of energy and to work within these constraints when addressing climate change.\n\nIn addition, the author criticizes academic exercises like the Raskin op-ed, which advocates for denying emergency support to the fossil fuel sector in hopes of bankrupting the industry, and suggests that there are no clever tricks to address climate change. The author also questions the effectiveness of a carbon tax and dividend policy, noting that it may be seen by voters as simply raising the cost of energy. Finally, the author criticizes the lack of action to address climate change, highlighting the need for policy that considers constraints and tradeoffs.",id:"leaf853",children:[]},{count:8,medianLikes:4,avgLikes:6.6,maxLikes:25,commentRms:17.8,titles:["Taxation and Financial Discussions","Taxation and Wealth","Taxation and Finance","Taxation and Finance Discussion","Taxation and Finance"],summary:"The author of these comments expresses a consistent interest in taxation and business finance. They are critical of tax policies that they see as unfair or ineffective, such as including the employer portion of payroll taxes when calculating taxes on small business owners. They encourage others, including the writer of the article they are commenting on, to take advantage of tax benefits and deductions that may be available to them, suggesting that consulting with a small business accountant might be helpful.\n\nThe author is careful to separate tax avoidance from illegal tax evasion, acknowledging that wealthy individuals and businesses may engage in legal tax shelters and tax avoidance strategies to minimize their tax burden. They argue that the issue is not one of wealthy individuals cheating on their taxes but rather structural issues such as the pathologically high estate tax exemption and the legal mechanisms that allow the wealthy to minimize their tax liability.\n\nThroughout their comments, the author writes in a respectful and thoughtful tone, engaging with the content of the articles and adding their own perspectives and experiences. They demonstrate a strong understanding of taxation and business finance, and they encourage others to take advantage of opportunities to improve their financial situation.",id:"leaf904",children:[]},{count:7,medianLikes:5,avgLikes:6.7,maxLikes:14,commentRms:18.3,titles:["Fiscal Policy Comments","Fiscal Policy Discussion","Fiscal Policy Discussions","Economic Policy Comments","Fiscal Policy Discussions"],summary:"The author has made a series of comments on different topics. On child care, they reference an article that explains that the high cost of child care is due to the labor-intensive nature of the business, with teacher pay and benefits being a significant driver of these costs. They argue that this fact should be taken into account when designing policies to address this issue. \n\nOn taxes, they point out that on average, everyone in Germany pays more taxes than people in the US. They argue that more resources should be invested in the public sector by increasing taxes on everyone, and highlight countries that have a high government revenue as a percentage of GDP. \n\nThe author also comments on government spending and deficits. They point out that the US already spends more on healthcare than on defense, and argue that the US's national healthcare problem is a cost problem. They also raise concerns about the deficit impact of the Build Back Better Act and notes that the deficit impact would be much larger if certain programs were made permanent. Finally, the author comments on the cost of the expanded child tax credit, arguing that advocates for this policy have not been honest about how expensive it is.",id:"leaf917",children:[]}]}]},{count:345,medianLikes:8,avgLikes:13.9,maxLikes:105,commentRms:25.3,titles:["Commentary on Social Issues","Assorted commentaries","Variety of perspectives","Commentary on Social Issues","Diverse Topics"],summary:"In these comments, the author provides their thoughts on a variety of topics, from machine learning, to Marxist America, to empathy for those who are politically polarized. The author shows a strong concern for pragmatic approaches to solving political and social issues, especially when it comes to understanding constraints and tradeoffs. They argue that it is essential to recognize the negative externalities of specific populations, such as the homeless, and to use language that clearly separates problematic individuals from the simply downtrodden. The author also acknowledges that individuals can vary in the degree to which they accept pragmatic arguments and that it is important to empathize with those who are politically polarized rather than dismiss them.\n\nAdditionally, the author comments on the subject of machine learning, expressing a desire for more details on specific machine learning models' performance for each tag and advocating for term frequency methods to be replaced with large-language-model-derived methods that can better quantify semantic meaning. Furthermore, the author shares their interest in Singapore's racial policies and their belief that Americans lack comparative perspective on racial or ethnic issues. Finally, the author notes Kathryn Paige Harden's book and her relevant research but emphasizes that the research does not imply that \"poor people are genetically inferior\". Instead, it highlights the inequities of the current system that can unfairly punish individuals for innate differences.",id:"branch1009",children:[{count:45,medianLikes:17,avgLikes:24.6,maxLikes:105,commentRms:19,titles:["Anti-Rule-Enforcement Leftists","Anti-establishment commentary","Anti-rule enforcement mindset","Anti-Rule-Enforcement Leftists","Anti-Establishment Comments"],summary:"The author makes a variety of comments on different topics, but there are a few key themes that emerge. One theme is a concern for the Democratic Party's ability to win elections, and a frustration with its left-leaning elements. The author argues that certain anti-establishment leftists, who are characterized as having an \"anti-rule-enforcement\" mindset, would be better suited to a libertarian or anarchist political allegiance. They also criticize progressives who graduated from elite universities that benefit from exclusivity and privilege. Additionally, the author argues that some progressive activists are more incentivized by fundraising than by making real progress towards their goals.\n\nAnother theme in the author's comments is a concern for the level of political polarization and extremism in American politics. The author notes that many people view politics through a moral lens and are not interested in compromise or cooperation with people on the other side of the aisle. There is also a concern that some right-wing intellectuals are promoting anti-democracy and anti-liberal ideas that are infiltrating the Republican Party.\n\nFinally, the author offers some thoughts on political messaging and strategy, advocating for a popularism strategy that avoids alienating language and occasionally courts controversy. They suggest that the Democratic Party needs to find ways to appeal to moderate and swing voters without abandoning its principles.",id:"leaf974",children:[]},{count:45,medianLikes:12,avgLikes:16,maxLikes:52,commentRms:22.6,titles:["Controversial Leftist Ideology","Commentary on Beliefs and Values","Internet Atheism","Provocative Opinions on Society","Controversial Leftist Ideas"],summary:'The author expresses frustration with American leftists who deny constraints and tradeoffs, believing that these considerations are essential in all political economic systems. They provide an example of the cost-benefit analysis in healthcare to illustrate this point. Additionally, the author believes that parents should have near-complete sovereignty over their children, except in extreme cases where their actions would permanently damage the child. \n\nThe author also explores the appeal of degrowth and eco-asceticism to some individuals, admitting that they struggle to empathize with the desire to make anyone materially poorer. They posit that rejection of material wealth can sometimes be a form of ego defense mechanism. The author also discusses the rise and fall of the New Atheism movement on the early internet, believing that it provided a sense of community and contributed to a feeling of rebellion among its members.\n\nFurthermore, the author believes that all relationships, including sexual ones, are transactional in some ways, even if not necessarily financial. They argue that prostitution should not be stigmatized as it is just a more transparent example of transactional relationships, which exist in all forms of relationships. Lastly, the author disputes the concept of “authentic preferences," believing that the mind is a combination of conscious thinking and subconscious impulses, and that neither is more authentic than the other.',id:"branch982",children:[{count:4,medianLikes:6,avgLikes:6.5,maxLikes:13,commentRms:7.9,titles:["Genetic Lottery Comments","Genetic Lottery Discussion Group","Genetic Lottery Comments","The Genetic Lottery discussion","Genetics and Society"],summary:"The author of these comments is interested in the work of Kathryn Paige Harden, as discussed in her book \"The Genetic Lottery\". The author indicates that they found a transcript of a recent interview with Harden informative, and appreciated the podcast. They ask whether the research has influenced the interviewer's thinking about government policy for achieving better and fairer social outcomes, and how Harden's work challenges traditional liberal views that expanding education can ameliorate poverty. \n\nThe author notes that, according to Harden, innate genetic components may impact career success. As a result, the author suggests that downplaying educational expansion as a means to addressing poverty and proposing more redistribution to directly improve people’s material conditions may be more useful. The author is also concerned that conservatives might use the same scientific facts to argue for a revitalization of social Darwinism, and questions whether drawing attention to these scientific findings in political debates could backfire. They ask whether Democrats should embrace Harden's moral argument for society/government to ensure everyone lives a life of dignity without material deprivation due to the inherent unfairness of the genetic lottery. \n\nThe author is clear to emphasize that none of this research implies \"poor people are genetically inferior\". They suggest that Harden's book highlights the fact that variation among people is a good thing, but our social systems can unfairly reward and punish people for variations that may have at least a partial genetic component. They argue that neither sibling should be massively rewarded nor penalized in their dignity and quality of life due to their luck of the genetic lottery.",id:"leaf757",children:[]},{count:41,medianLikes:12,avgLikes:16.9,maxLikes:52,commentRms:22.6,titles:["Online Commentary on Various Topics","Online Discourse","Internet Commentary on Culture and Society","Online Ideological Discussion","Internet Commentary on Society"],summary:"The author of these comments often emphasizes the importance of acknowledging constraints and tradeoffs in decision-making processes, both in political and personal contexts. They critique what they see as a tendency among some American leftists to deny such considerations, framing this as a potentially frustrating obstacle to pragmatic problem solving. Additionally, the author is interested in exploring the appeal of degrowth as an idea and why it might resonate with certain people despite the potential downsides of materially impoverishing oneself. \n\nThe author also shows a nuanced understanding of moral psychology and the role that intuition and emotion can play in shaping political values and beliefs. They cite Jonathan Haidt's work on this topic and question whether attempts to change others' political values through reasoned argument are often futile. Furthermore, the author questions assumptions around monogamy and explores the possibility that open relationships may be a better fit for some couples than trying to adhere to exclusive monogamy. Finally, they reflect on the rise and fall of the \"New Atheism\" movement in the early days of the internet, and the sense of community and belonging that it offered to those who participated in it.",id:"branch978",children:[{count:4,medianLikes:9,avgLikes:11.8,maxLikes:24,commentRms:9.9,titles:["The Righteous Mind discussion","Moral Intuition Group","The Righteous Mind discussion","Emotional Intuition and Politics","The Righteous Mind Discussion"],summary:'The comments are all related to the ideas of Jonathan Haidt, particularly his book "The Righteous Mind." The author of these comments seems to be a great fan of Haidt\'s work, and mentions that much of our moral and political values come from intuitive thought, with reasoned arguments serving to justify those intuitions. They also mention a Vox article by Haidt discussing the way that supporters of different politicians focus on different moral concepts.\n\nThe author also praises Haidt\'s book "The Happiness Hypothesis: Finding Modern Truth in Ancient Wisdom" for its insight on the subconscious thought and emotions in shaping our perception of the world. They point out how a lot of our rational thought is narrative-building around our initial intuitions, and that we cannot force ourselves into feeling a specific way nor eliminate a biased perception of reality. They highlight the importance of mindfulness in managing the negativity bias that emerges from responses to threats and unpleasantness.\n\nThe author finishes by pointing out how emotions and intuitions come first, and then reasoning is used to construct a socially acceptable narrative that validates the feelings and resulting behaviour. They suggest accepting and exploring our feelings, then inspecting our current justifying narratives to see if they are consistent with our values or factual understanding. Finally, they recommend discussing any dilemmas with respected interlocutors to slowly change our intuitions.',id:"leaf697",children:[]},{count:3,medianLikes:18,avgLikes:21,maxLikes:35,commentRms:15.1,titles:["Atheism and Religion Analysis","Atheism on the Internet","Atheism and Religion Discussion","The Rise of Atheism","Early Internet Atheism"],summary:'The author believes that the portrayal of evolution in a TV show called "Go God Go" gives a good understanding of how Americans viewed this topic in 2006. The author refers to the show "South Park" to describe how evolution was taught by a teacher who thinks it is "a bunch of bullcrap" but has to teach it anyway. The TV show includes debates around teaching evolution and religion, and Richard Dawkins is also featured. Another topic discussed by the author is the rise and fall of atheism on the internet. The author recalls how active discussions and essays about religion and evolution were in the early days of the internet. However, the internet became a place to express political views rather than to engage in discussions. Finally, the author shares his perspective on religion\'s role in social groups. The author believes that Christianity is disruptive because of its focus on individual salvation, which challenged social hierarchies. The author also finds the theory that Protestantism laid the foundation for capitalism and liberalism to be credible and interesting.',id:"leaf885",children:[]},{count:13,medianLikes:10,avgLikes:18.4,maxLikes:52,commentRms:19.4,titles:["Social Media and Mental Health","Social media and mental health","Commentary on Social Medias Impact","Social Media and Mental Health","Social Media and Mental Health"],summary:"This group of comments addresses different topics such as traditionalist values, political viewpoints, environmentalism, social media, and class markers. The commenters express various perspectives on these topics. For instance, one commenter argues that traditionalist values can offer stability, emphasize the importance of family and community, and encourage personal responsibility and self-discipline. On the other hand, another commenter believes that the left is unwilling to acknowledge constraints and tradeoffs in their policy decisions.\n\nAnother set of comments focuses on the appeal of degrowth and eco-asceticism. One commenter suggests that the motivation behind degrowth may stem from a desire to reject material comforts as a form of sour grapes. However, the commenter acknowledges their theory is likely biased and self-serving. The group of comments also touches on the role of social media in contributing to the deterioration of mental health, particularly among adolescent girls. Additionally, there is a discussion on the inevitability of upper class individuals seeking to differentiate themselves from lower ones, often through new class markers and trends. Overall, this group of comments showcases a wide range of perspectives on different topics, often offering contrasting viewpoints and shedding light on the complexity of these issues.",id:"leaf931",children:[]},{count:6,medianLikes:14.5,avgLikes:13.8,maxLikes:22,commentRms:17.5,titles:["Obesity discussion","Obesity Discussion Group","Obesity Discussion","Obesity discussions","Obesity-discussion"],summary:"The author of the comments seems to believe that the conscious mind and subconscious impulses are both equally important and neither is more authentic than the other. They provide an example of how the rational mind can construct a better environment for the subconscious to operate within, such as removing unhealthy temptations from the home and meal planning to minimise overeating. The author also shares a personal experience of taking fiber supplements to control their appetite and unintentionally losing 5 pounds in one month.\n\nThe author references a CDC report that shows an inverse correlation between women's income and obesity, but not for men. They suggest that this difference can be explained by social factors and that women are more penalized for being overweight. The author also questions the effectiveness of shaming unhealthy dietary habits as a means of preventing obesity, referencing their personal experience of quitting smoking due to shame but acknowledging that shaming may not work for everyone.\n\nFinally, the author expresses the opinion that knowledge alone is insufficient in maintaining a healthy weight and that it requires a fair amount of conscious focus, time, and effort. They suggest that people who put maintaining a healthy weight into practice are likely also engaging in other healthy behaviors.",id:"leaf902",children:[]},{count:15,medianLikes:13,avgLikes:17.3,maxLikes:43,commentRms:20.3,titles:["Unconventional Relationship Views","Unconventional Relationship Perspectives","Unconventional Relationship Views","Unconventional Views on Relationships","Unconventional Relationship Views"],summary:"The author of these comments holds a strong belief in individual autonomy and has a deep concern for human dignity. They are against broad restrictions that limit personal choices and see internalizing the costs of suboptimal behavior as a more appropriate approach. They believe that parents should have nearly complete sovereignty over their children and that society should have a high bar for intervention. The author also expresses support for euthanasia in some cases and is troubled by the lack of a legal option for it. \n\nThe author's position on open relationships is nuanced; they do not fully agree with Dan Savage's argument but believe that it should not be dismissed outright. They acknowledge the challenges of monogamy and emphasize the importance of considering non-monogamous options early in a relationship and revisiting the conversation as it evolves. The author also takes issue with Bergner's argument against the medical and social approach to psychosis, arguing that some cases may require antipsychotic medication and involuntary commitment. \n\nThe author supports internalizing costs to regulate behavior rather than broad restrictions, such as with age-restricting internet porn. They propose empowering parents to better regulate their children's internet and screen usage through restricted devices and app-specific controls. Lastly, the author acknowledges differences in ethical beliefs, recognizing that guilt or shame will be ineffective on those with different creeds and that we should all understand the diversity of ethical beliefs.",id:"leaf967",children:[]}]}]},{count:37,medianLikes:7,avgLikes:11.3,maxLikes:78,commentRms:23.9,titles:["Perspectives on Current Issues","Group name Diverse perspectives","Varied perspectives on relevant topics","Commentary on various topics","Diverse Topics"],summary:"The author's comments cover a variety of topics including housing policy, gun control, global food systems, and politics. One of their main viewpoints is that there is an inherent contradiction between leftist politics and support for NIMBYs (Not In My Backyard) that enforce conservative, wealthy homeowners' preferences for maintaining their neighborhoods. They argue that this alliance must be broken and that a more critical Marxist analysis is needed to highlight the class interests at stake. \n\nThe author also discusses a range of ideas related to gun control, including the need for existing laws to be enforced more effectively before advocating for more drastic measures like confiscation and the constitutional reinterpretation of the Second Amendment. They suggest that many Democrats underestimate the strong emotional attachment that many Americans have towards gun ownership and that a backlash against gun control could fire up a pro-gun constituency and alienate potential Democratic voters. \n\nRegarding the global food system, the author highlights the strategic value that China sees in maintaining its large wheat reserves and how this could lead to future geopolitical concessions in exchange for food. They also express concern over the negative externalities of density and the need to address the social problems of homelessness before advocating for more housing abundance. \n\nIn addition, the author discusses the political power of homeowners in creating zoning regulations, the potential for fiscal crises in tech hubs like San Francisco, the rise of nationalism in Russia, and the dangers of relying too heavily on isolated examples like a recent incident in which a woman used a gun to stop a mass shooting. Overall, the comments reveal a thoughtful and nuanced perspective on a range of complex issues.",id:"branch995",children:[{count:12,medianLikes:6.5,avgLikes:12.9,maxLikes:52,commentRms:17.1,titles:["Zoning and Homelessness Discussions","Zoning and Housing Comments","Zoning and Homelessness Discussions","Zoning and Homelessness Discussions","Debating solutions for housing shortage"],summary:"The comments from this author touch on several themes relating to addressing homelessness and opposition to zoning reform. One comment discusses the need to address nuisance concerns and differentiate between the simply downtrodden and those with severe mental health or addiction issues. The author suggests a strategy of advocating for publicly owned and operated SROs to address concerns about capitalistic exploitation and discrimination. Another comment highlights the importance of addressing negative externalities of density and the socially disruptive group of homeless individuals. The author suggests making a distinction between the two groups of homeless individuals to help push for zoning changes that benefit the deserving downtrodden. \n\nIn addition, the author discusses the language used to differentiate between problematic homeless versus working poor and advocates for using terminology that normies recognize. Another comment explores the underlying conservative values of preserving neighborhood character and property values which align with small-c conservatives who support single-family zoning. The author also delves into the economic cost of homeownership and the choice many individuals face between owning more housing or renting less. The final comment discusses the danger of blaming institutional investors, such as BlackRock, for the chaotic housing market, emphasizing that housing undersupply is the result of decades of opposing new home building. \n\nOverall, this author's comments reveal a nuanced understanding of the issues relating to homelessness, zoning reform, and the housing market, as well as the underlying values and motivations that drive opposition to change. They highlight the need for clear language, differentiation between different groups of homeless individuals, and a more comprehensive approach to addressing the housing crisis.",id:"leaf949",children:[]},{count:10,medianLikes:10.5,avgLikes:15.4,maxLikes:78,commentRms:17.1,titles:["Gun Control Discussion","Debating Gun Control Solutions","Gun Control Debate","Gun Control Debate","Gun Control Debate Comments"],summary:"The author of these comments takes a critical stance on gun control efforts. They argue that the strongest gun control advocates are not serious in enforcing current laws, while also advocating for more restrictions and weakening law enforcement. They express frustration with the conflation of different issues, such as mass shootings and overall deaths from guns. The author recognizes the strong emotional belief in personal gun ownership for many Americans and sees it as comparable to the right to an abortion. The author also questions the efficacy of gun restrictions in reducing gun violence, suggesting that existing laws are not being enforced, and believes that Republicans still manage to make national elections close due to their geographic advantage.\n\nIn addition, the author argues against the use of guns in situations where non-lethal force could have been used. They cite the case of an Atlanta police officer who was fired and charged with murder after fatally shooting an assailant who stole the officer's taser gun and fired it at officers. The author also mentions a news story about a woman who used her pistol to stop a mass shooting, describing it as the \"dream scenario\" for gun rights activists, but expressing doubt that it is a scalable solution to addressing gun violence. Overall, the author's comments reflect a critical perspective on gun control efforts and highlight the challenges involved in addressing the complex issue of gun violence.",id:"leaf946",children:[]},{count:7,medianLikes:5,avgLikes:7.7,maxLikes:16,commentRms:18.7,titles:["Wheat and Geopolitics","Global Wheat Dynamics","Wheat Reserves and Trade","Geopolitical Wheat Dynamics","Wheat and Geopolitics"],summary:"In this set of comments, the author discusses various issues related to global geopolitics. The author believes that western nations may not be able to convince China to sell off its wheat reserves, which China considers to be a strategic asset. While African and Middle Eastern countries may be ready to make strategic concessions to China for food, in the long term, these concessions could harm global security.\n\nThe author also points out that the US has the potential to replace the lost imports of wheat from Ukraine and Russia with current agricultural productivity. However, the shift to planting soybean and corn instead of wheat is concerning, particularly because the increase in corn crop is used for ethanol production and soybean is used for exporting animal feed to China. \n\nFurthermore, the author discusses the possibility of a US-China conflict over Taiwan and questions whether the US would be willing to break the blockade of Taiwan by sinking Chinese ships. The author is uncertain whether the bipartisan China hawk consensus would lead to war, as both parties may not be willing to declare war on a nuclear power for the benefit of a third country, especially when the US doesn't have a defense treaty with Taiwan.\n\nFinally, discussing MAD (mutually assured destruction), the author points out that countries may not necessarily resort to their MAD options during a hot war, as was seen during WWII when chemical weapons were not used despite their ability to inflict massive damage. The author suggests that a hot war in contested territory could result in millions of deaths without any parties resorting to nuclear weapons.",id:"leaf937",children:[]},{count:8,medianLikes:7,avgLikes:6.8,maxLikes:12,commentRms:20.2,titles:["Race and Ethnicity Discussions","Group Name Racial and Political Issues","Race and Immigration Discussions","Racial and Policy Discussions","Racial Issues"],summary:'The author has left comments on various topics, but there are a few main themes or viewpoints that can be identified within them. Firstly, the author is interested in exploring how different countries have addressed race and ethnic issues, and have recognized and supported national minority populations through official policy structures. The author also highlights the challenges associated with promoting group identification or "race consciousness" among African Americans as a means of achieving social integration. Additionally, the author comments on the ways in which gang leaders can be isolated from their organizations in order to disempower and disrupt their activities. The author is generally concerned with policies and strategies that promote inclusivity and equity, and is critical of approaches that shift burdens onto local governments or individuals without considering the broader societal implications.',id:"leaf954",children:[]}]},{count:106,medianLikes:6.5,avgLikes:11.7,maxLikes:70,commentRms:24.6,titles:["Media and Tech Discussions","Thoughtful Comments","Thoughtful Comments on Various Topics","Comments on media consumption","Varied Opinions on Business and"],summary:"The author has left multiple comments on various topics. On the topic of billionaires, their opinion is that the wealthiest Americans generally got there through entrepreneurship and building firms that provide new goods and services. They also question at what point should a policy failure be performed-when ownership stakes become valued at a billion? The author notes that regulating such companies could hinder the free market and that the majority of billionaires seem committed to giving away the majority of their extreme wealth rather than allowing their heirs to inherit it.\n\nOn the subject of social media, the author believes that peer pressure can play an important role in improving our media consumption habits and suggests that Twitter and TikTok should be viewed as low-class, dirty habits, while higher-quality publications should be viewed with pride. They also suggest that a paid social media offering could be a potential solution. Additionally, the author believes in utilizing bots crackdown, creating multiple clients for Twitter, and is against unnecessary regulation of cryptocurrencies.\n\nThe author’s other comments touch on regulatory challenges faced by Substack, an opinion on the coverage of tech companies, the need for a leadership shake-up in Amtrak, and the proposal to unbundle prices for economy airplane seats based on seat location and assigning preferred family seating.",id:"branch1004",children:[{count:27,medianLikes:6,avgLikes:15.4,maxLikes:70,commentRms:23.9,titles:["Crypto and Tech Discussions","Crypto and Technology Discussions","Crypto and Tech Discussions","Crypto and Tech Discussions","Crypto and Tech Discussions"],summary:"The author generally expresses a skeptical or critical view towards various topics. They do not see NFTs as a wise financial investment, but rather as a collectible item similar to baseball cards. The author is unsure about the purpose of cryptocurrency regulations, but suggests that regulation might limit institutional investment. They express doubt about Elon Musk's rightward turn, highlighting his use of Twitter to make controversial comments. Additionally, the author believes that Amtrak leadership needs a significant revamp, perhaps by bringing in foreign experts. They question the policy of attaching further strings to the CHIPS Act funding, given that the US already has structural disadvantages in the chip manufacturing industry. Finally, the author discusses Intel's reorganization struggles and warns that the company will lose manufacturing if it does not demonstrate success soon.",id:"branch983",children:[{count:6,medianLikes:5.5,avgLikes:8.8,maxLikes:31,commentRms:18.7,titles:["Crypto Discussions","Crypto Discussions","NFTs and Crypto Discussion","NFTs and Crypto Discussion","NFTs and Crypto Discussion"],summary:"The author of the comments appears to have a skeptical view of the potential value of NFTs as a long-term investment, but recognizes their similarity to traditional collectibles. They also express uncertainty about the purpose of cryptocurrency regulations and make analogies to beanie babies trading. The author suggests that crypto might be a good outlet for reckless financial speculators, as long as it remains isolated from broader financial markets. They express annoyance with the current hype around NFTs, and joke about a recent instance of Donald Trump getting into NFT sales.\n\nIn addition to comments on NFTs, the author also shares their opinion on the creator of Bitcoin, Satoshi Nakamoto, believing that it is likely Adam Back. The author cites a 2020 video from Barely Sociable, “Bitcoin - Unmasking Satoshi Nakamoto”, and a 2021 Coinspeaker article, “Barely Sociable Analyst Believes Blockstream CEO Adam Back Is Satoshi Nakamoto”, as evidence to support this theory.\n\nFurthermore, the author compares the honesty of early Bitcoin enthusiasts, who were openly hostile to managed financial systems, to the hype around web3 promoters and NFTs. They even mention the Silk Road era, which they perceive as being “more truthful” in its facilitation of financial crimes.",id:"leaf920",children:[]},{count:8,medianLikes:5.5,avgLikes:16.6,maxLikes:65,commentRms:18.5,titles:["Twitter Discussions","Controversial Twitter Discussions","Twitter Commentary","Twitter Discussions","Twitter Discussions on Various Topics"],summary:"The author has written about various themes in their comments. In response to Elon Musk's right-wing stance on Twitter, the author expressed frustration with Biden's exclusion of Tesla from events promoting the electric vehicle industry, which may have led to a plausible justification for Elon's shift to the right. At the same time, the author acknowledges that Elon's behavior risks distracting him from making Tesla a politically polarizing brand. The second comment praises Elon's ability to make EV adoption a non-partisan issue, with conservatives buying Teslas to stick it to Biden. The next comments express surprise over Biden's position on a railroad strike and his call for Congress to support a tentative agreement between railroad workers and operators. The author notes their expectation of Biden to leverage the strike to meet the union's demands. There is also a discussion of management's aversion to increasing sick leave. The author feels that management should calculate the cost of increased sick leave against the expense of other union demands. The author further discusses the fear that EV adoption may lead to a loss of auto jobs that sparked the first UAW strike against General Motors. In response to a tweet mentioning InfoWars and Kanye West, the author finds the comments incoherent and unfathomably gross. Finally, the author provides their opinion on Elon Musk's rise to power on Twitter and expresses concern about Musk's business interests in China and the possibility that he may suppress information negative to China to please the CCP.",id:"leaf927",children:[]},{count:3,medianLikes:12,avgLikes:17.7,maxLikes:32,commentRms:8.7,titles:["Intels Manufacturing Struggles","Intels Struggles and CHIPS","Intels Manufacturing Struggle","Intel and CHIPS Act Debate","Intels Manufacturing Struggle"],summary:"The author of the first set of comments discusses Intel's struggle to keep up with TSMC and how Intel is attempting to reorganize by separating their design and manufacturing. The author notes that should the reorganization fail, Intel will rely on TSMC for their future production and will have to sell its manufacturing division. However, the author warns that Intel's revenue and margins are dropping faster than they forecast, and if they can't soon demonstrate success in their reorganization strategy, investors will demand that Intel exit manufacturing.\n\nIn the second set of comments, the author expresses concern over the CHIPS Act's regulatory burden, which increases the cost of deploying funds and exacerbates structural deficits in chips manufacturing. The author argues that instead of adding regulatory hurdles, we should be removing them and incentivizing firms to make economically rational decisions, regardless of the source. The author worries that, in 10 years, the CHIPS Act will be seen as accomplishing little at a high expense, highlighting the need for careful planning and efficient deployment of public investment.\n\nOverall, both sets of comments address issues related to the structural challenges of the semiconductor industry in the United States and the government's role in addressing these challenges. While the first set of comments provides specific commentary on Intel's strategy, the second set of comments focuses on the CHIPS Act and its potential impact on the industry.",id:"leaf772",children:[]},{count:10,medianLikes:7.5,avgLikes:17.6,maxLikes:70,commentRms:20.3,titles:["Podcast recommendations","Podcast Recommendations","Podcast Recommendations","Podcast and Article Recommendations","Podcast Recommendations"],summary:"The author recommends various podcasts and newsletters to learn more about different economic and business topics. They recommend the Acquired podcast for informative and entertaining long-form discussions on the history of Walmart and Amazon and the Odd Lots podcast for discussions on economics and current economic themes. They also recommend Matt Klein's newsletter, The Overshoot, for data analysis of economic issues facing the world. The author believes that entrepreneurs and their companies make a massive contribution to the American economy by providing new goods and services and creating employment opportunities. They criticize the view that businesspeople are unjustly in control of massive and powerful institutions without acknowledging the dynamics and challenges of running a business. Finally, they discuss accredited investor restrictions and Theranos's reliance on investments from powerful individuals and family friends rather than venture capital funds.",id:"leaf959",children:[]}]},{count:39,medianLikes:6,avgLikes:8.8,maxLikes:33,commentRms:22.5,titles:["Media and Tech Critique","Media and Tech Analysis","Media Industry Analysis","Media and Tech Analysis","Media and Tech Analysis"],summary:"The author expresses various opinions and ideas related to the media industry and social media platforms. They cite the work of Ben Thompson frequently, and discuss a range of topics such as Twitter's content moderation and financial model, the collapse of regional sports networks due to cord cutting, the disruptive effect of the internet on journalism and media, and the importance of publicly sharing virtuous media consumption habits to harness the power of peer pressure.\n\nThe author also notes the negative effect of sensationalism on journalism, expressing a desire for more rigorous policy coverage. They coin 'rage clicks' as a way to describe the increased traffic generated by scandalous news stories, however, they agree that the Democratic System and the Public Broadcasting Service help to reduce the negative effects of internet-driven sensationalism.\n\nRegarding Twitter's content moderation issues, the author suggests separating Twitter into a back-end service that hosts content and a front-end client that provides moderation and algorithmic amplification. They propose creating various clients with different sets of rules and moderation, such as a client designed for journalists that focuses on the filtering of harassment. They also express concern regarding a lack of retention and user growth on Twitter, and suggest that advertisers will consolidate their spending onto the biggest networks, which risks leaving Twitter as an odd network out. Finally, they propose that Twitter includes a mass delete feature to reduce controversy around old tweets.",id:"branch990",children:[{count:9,medianLikes:6,avgLikes:9.7,maxLikes:24,commentRms:14.3,titles:["Twitter Business Model Discussion","Twitter Business Model Discussion","Twitter Moderation and Client Separation","Twitter Business Model Analysis","Twitter Business Analysis"],summary:"The author is in favor of a proposal by Ben Thompson to address the content moderation and financial model of Twitter by separating it into a backend service that hosts content and a front-end client that provides moderation and algorithmic filtering and ranking. They suggest that this would enable experimentation with diverse user preferences and create a range of clients, including highly moderated clients and wild west anything goes clients. The author explores possible clients such as those geared towards journalists, techies, or partisan clients that filter and rank social feeds according to political preference.\n\nThe author also supports Elon Musk's desire to crack down on bots on Twitter, which could lead to a more pleasant user experience and higher ROI on ad impressions. They suggest that this initiative would be difficult for a public corporation to undertake but more feasible for a private company like Twitter. The author also believes that everything we say on the public internet will be preserved for eternity, acting as if everything we add to the internet is permanent. They suggest that people should act as if everything they say online can and will be tied to their public real identity.\n\nFinally, the author views Twitter as a horribly managed business, citing Ben Thompson's 2015 article, \"Twitter Needs New Leadership.\" They note that Twitter's active user growth is too small and that almost nothing was done to improve the product or onboarding experience until recently, when Twitter rolled out a new logged-out page and an instant timeline. The author highlights that Twitter has a debt burden, but this is manageable without the large one-time payment made to settle a class-action lawsuit. They note that the withdrawal of advertisers due to reputational risk on Elon Musk's Twitter is creating a new problem.",id:"leaf951",children:[]},{count:14,medianLikes:5,avgLikes:8.6,maxLikes:33,commentRms:17.2,titles:["Media Consumption Habits","Media Landscape Analysis","Media Ecosystem","Media Landscape","Media Consumption Habits"],summary:"The author of these comments has a strong interest in media consumption and its effects on society, as well as the impact of technology on traditional media. They are generally critical of the state of media today, with particular concerns about the quality of content and its effects on public discourse. They believe that legacy media institutions are struggling to compete with digital media start-ups, and that this has led to a decline in the quality of journalism as traditional outlets have had to adapt to remain competitive. They are particularly supportive of outlets like Bloomberg News, which they believe offer a more fact-based, informative approach to news coverage.\n\nThe author also has concerns about social media and the influence it has on media consumption and public opinion. They argue that social media platforms have the power to shape demand for content in a way that traditional media do not, and that this has negative effects on the quality and objectivity of news coverage. They believe that peer pressure can play a positive role in improving media consumption habits, and suggest that media companies should embrace transparency and accountability in order to foster a culture of responsible media consumption.\n\nOverall, the author's views reflect a deep concern about the state of media today and its effects on society. They are critical of the role that technology has played in changing the media landscape, and believe that traditional media institutions must adapt in order to remain relevant and effective. They are interested in exploring solutions that promote transparency, accountability, and responsible media consumption.",id:"leaf925",children:[]},{count:6,medianLikes:10,avgLikes:11.2,maxLikes:25,commentRms:17.3,titles:["Media Business Challenges","Media Business Challenges","Media Bundle Discussion","Media Business Challenges","Media Business Challenges"],summary:"The author of these comments offers a range of insightful and analytical viewpoints on a variety of topics. One common thread throughout their comments is the discussion of economics and business models. In the first comment, the author highlights the impact of fixed and variable costs on suppliers and how this can lead to a decrease in the quantity supplied when a price ceiling is introduced. \n\nThe author also offers thoughts on Netflix's business model and their need to resist mob censorship in order to remain a go-to streaming platform for everyone. They discuss the challenges faced by sports franchises outside of the NFL and the need for these franchises to adapt to the changing media ecosystem in order to nurture a new generation of fans. \n\nThe author also provides a thorough discussion of bundling and its benefits, citing Shishir Mehrotra's article on the topic. They point out that bundles allow for consumers to access more media than they could afford a-la-carte, and providers to address more of their potential markets. The author does mention that not all products can be bundled and that this model has its limitations, but ultimately emphasizes the value of bundling for consumers and producers alike. Overall, the author's comments demonstrate a strong understanding of economics and business models and provide valuable insights on a range of related topics.",id:"leaf909",children:[]},{count:3,medianLikes:5,avgLikes:4,maxLikes:6,commentRms:18.1,titles:["Varied Experiences and Innovations","DMV Experiences AWS Innovation","Experiences and Innovations","Varied Experiences and Services","Tech Insights"],summary:'The author has made three diverse comments. In the first comment, they discuss their experience with state DMVs in California and Georgia. According to them, the bureaucracy at California DMV was time-consuming, while Georgia DMV provided more flexibility and quick processing. Therefore, the author concludes that the quality of services offered by DMVs varies from state to state.\n\nIn the second comment, the author evaluates Amazon Web Services (AWS) and its innovative approach to offering managed services that transformed conventional server leasing into cloud computing. AWS allowed users to store and access large files, manage billing at a fine-grained level, and offered fully automated tools to control instances - this significantly encouraged cloud computing adoption.\n\nIn the final comment, the author expresses their liking for Amazon\'s "subscribe and save" service for non-perishable consumer goods. They like the convenience of having monthly email reminders to check their subscriptions, being able to change the delivery schedule for goods, and the discounts offered. The author feels that the premium paid for this service is worth it because they can streamline their shopping process.',id:"leaf913",children:[]},{count:7,medianLikes:7,avgLikes:8.3,maxLikes:22,commentRms:19.7,titles:["Internet Regulation Comments","Tech Policy Discussions","Internet Regulation Discussions","Internet Regulation Discussions","Tech and Regulation"],summary:"The author has expressed opinions on a variety of topics, including app stores, Apple's antitrust case, self-preferencing in web search, the regulation of content, advertising regulations, and KYC/AML regulations. They believe in the value of app stores for security reasons and acknowledge that some malware can still slip through the approval process. When it comes to Apple's App Tracking Transparency policy, they do not see a case for sanctioning Apple. They doubt that breaking up Alphabet would change much with regard to self-preferencing and think that the regulatory landscape for content platforms is a lot harder to justify than for broadcasting. \n\nRegarding advertising regulations, they highlight that previous cases have been struck down and that it may not be possible to regulate the marketing of alcohol and marijuana to the same extent as tobacco. The author is supportive of KYC/AML regulations and draws a comparison to driver's licenses and car registration for safety reasons. Finally, they mention the potential for camera-augmented cars to detect and document illegal driving behaviors and submit video evidence to the appropriate jurisdiction.",id:"leaf924",children:[]}]},{count:8,medianLikes:10.5,avgLikes:11.1,maxLikes:22,commentRms:9.6,titles:["Substacks Financial Situation","Substacks Financial Challenges","Substacks Financial Challenges","Substacks Financial Situation","Substacks Financial Situation"],summary:"The author has a negative view of Substack's recent crowdfunding round, arguing that it was potentially unfair to unsophisticated investors. In addition, they question the company's high valuation, which was set during a tech investment frenzy and may be difficult to justify in the current environment. The author suggests that Substack's reliance on a small number of high-profile writers creates risks and necessitates a high-touch sales model, which may be expensive and labor-intensive. The author argues that Substack's venture capital funding structure is not conducive to a smaller, profitable business, and that VCs may seek a sale if additional funding cannot be secured. Finally, the author suggests that Substack's high valuation may be difficult to maintain or justify, and raises concerns about the potential consequences of a down round.",id:"leaf832",children:[]},{count:32,medianLikes:10,avgLikes:12.2,maxLikes:52,commentRms:20.4,titles:["Subscriber Comment Insights","Subscriber Comment Analysis","SB Subscriber Comments","Commentators","Subscriber Comment Analysis"],summary:"The author of the comments is often interested in analyzing and improving the quality of discussion on Slow Boring. They suggest that the paywall has led to higher quality user comments and more engaging conversations. They propose ideas such as a paid social media offering, a comment ranking algorithm comparable to Reddit’s “Best” ordering, and a knowledge base for paid subscribers. They also find that contentious posts with a high volume of comments are often driven by a small number of users who post an excessive number of comments. They suggest avoiding the temptation to participate in these deeply-nested threads of heated discussion. Additionally, the author provides data analysis related to the comments on Slow Boring and other Substacks, such as the correlation of certain terms with likes and the distribution of comments among users. The author encourages subscribers to promote their best ideas and their opponents’ worst ones on social media, while avoiding reinforcing counterproductive messaging and intra-coalition disagreements on the platform.",id:"leaf980",children:[]}]},{count:112,medianLikes:7,avgLikes:11.6,maxLikes:99,commentRms:23.8,titles:["Tech Industry Discussions","Tech Work Discussion","Tech Industry Observations","Tech Industry Discussions","Tech industry observations"],summary:"The author's comments focus on various topics including the commodification of programming, challenges in identifying competent software engineers, potential solutions to student debt, managing work stress, and providing constructive feedback. They note that modern programming tools have commodified the field of software engineering by abstracting away technical challenges, allowing non-experts to become programmers, but the main challenge remains determining intended software behavior at a high degree of specificity. The author also discusses his experience interviewing CS grads and observed that even basic data structures and algorithms knowledge is missing in some graduates. The author suggests that Income Sharing Agreements (ISAs) could help alleviate student debt. They also discuss how managing people can be stressful yet prioritizing and triaging issues based on urgency and importance can help tackle this challenge. Finally, the author provides principles for delivering feedback which include immediacy, specificity, and positive feedback. They note that positive feedback not only helps in boosting morale but also helps in highlighting strengths and building an expectation for feedback.",id:"branch1007",children:[{count:39,medianLikes:5,avgLikes:7.3,maxLikes:46,commentRms:20.3,titles:["AI Discussions","AI and Future of Work","AI and Text Generation","AI and Technology Discussions","AI Discussions"],summary:"The author of these comments offers a range of perspectives on the impact and potential of AI technology. They discuss the potential of generative AI for content creation, such as improving the quality of user-generated content on platforms like YouTube. They also delve into the challenges of regulating AI, arguing that it may be difficult to prevent bad actors from using open-source AI models for malicious purposes while impeding potential benefits in industries such as healthcare. The author also explores the concept of sentience within AI systems and the philosophical debates surrounding the treatment of animals and human concerns such as end-of-life care.\n\nThe author further considers the potential applications of conversational AI that could generate writing and messaging that taps into the psychology of intended audiences, and explores the possibility of using AI in educational settings to help students correct essays generated by AI and thereby learn to better utilize AI as a tool. They also experiment with using AI to categorize comments on blog posts and create interactive maps based on the topics discussed.\n\nOverall, the author offers a nuanced and multifaceted perspective on the potential and challenges of AI technology, ranging from its potential to revolutionize industries to the ethical and philosophical considerations surrounding its development and use.",id:"leaf994",children:[]},{count:73,medianLikes:8,avgLikes:13.9,maxLikes:99,commentRms:22.9,titles:["Education and Society Discussions","Opinions on Various Topics","Education and Society","Diverse opinions on various topics","Education and Society"],summary:"The author of the first comment has shared some effective principles for delivering critical feedback, namely the importance of being immediate and specific in feedback, as well as incorporating positive feedback to highlight strengths. They also suggest that feedback helps builds expectations, making it easier for individuals to deliver and receive critique. Meanwhile, the author of the second comment argues that the normalization of the tech labor market will be good in the long run because competition will lead to disruptive new startups and offer more impactful employment opportunities. On the other hand, the third and seventh comments argue against the common belief that education is a great equalizer or vehicle for upward mobility, citing research that suggests student performance is largely predetermined by out-of-school factors like socioeconomic background.\n\nThe remaining comments focus on critiques of existing systems or practices. For instance, the author of the fourth comment questions the usefulness of busing policies, arguing that they were met with backlash from not just affluent whites, but parents across all socioeconomic backgrounds due to the strain it puts on children. The fifth comment critiques the notion that programming is becoming commodified or dumbed down as it is more about solving social problems rather than technical ones. Instead, programmers are leveraging modern programming tools to abstract away technical challenges, allowing for greater productivity and efficiency. Similarly, the author of the sixth comment challenges the notion that education should be the main focus of improving socioeconomic inequality, and instead suggests that income redistribution is a more effective measure. Lastly, the author of the eighth comment critiques defined benefit pensions, arguing that defined contributions are better as they force firms and governments to pay the bill today, and employees have incentives to project realistic or conservative investment returns to ensure adequate funding.",id:"branch1000",children:[{count:14,medianLikes:9,avgLikes:10.9,maxLikes:43,commentRms:17.5,titles:["Software Engineering Industry Trends","Tech Employment and Education","Tech Employment and Education","Software Engineering Comments","Tech Career Discussions"],summary:"The author, a software engineer, argues that programming has already been commodified for a decade, with modern programming tools and resources abstracting away most technical challenges. While AI may increase productivity, programming has reached the point where many could be a programmer because the main challenge is determining the intended software behavior. The author also suggests that the lack of formal certification has led to a boom in coding bootcamps, which promise students lucrative tech careers with as little as three months of training. Additionally, the author mentions that regardless of school, degrees do not effectively signal an engineer's capabilities and that the tech industry invests a lot in the interview process to find strong performers. Finally, the author suggests that the STEM Ph.D. to Wall Street pipeline is socially beneficial since it provides an alternative career path for aspiring researchers given the risk and uncertainty in research.",id:"leaf950",children:[]},{count:6,medianLikes:3.5,avgLikes:3.7,maxLikes:7,commentRms:19.6,titles:["Academic Discussions","Science Comments","Scientific Commentary","STEM PhD Admissions","Statistics and Surveys"],summary:"The comments from this author cover a variety of topics. For example, they discuss statistical methods for determining error bars based on sample size. They also talk about a coding error that caused a long-standing dispute in the scientific community and speculate about Chandler’s management style, which reportedly caused tension among grad students working in his lab. Additionally, they offer insights into the admissions process for STEM PhD programs, noting the importance of research experience and publications. Finally, the author reflects on the challenges of understanding organic chemistry, highlighting the complex interplay between scientific rules, intuition, and squishy narratives that characterizes this field. Despite the diverse range of topics covered by this author, they generally provide helpful insights and observations based on their own experiences and expertise.",id:"leaf926",children:[]},{count:11,medianLikes:10,avgLikes:12.5,maxLikes:50,commentRms:19.7,titles:["Workplace Challenges and Solutions","Workplace Improvement Strategies","Education Discussions","Teaching and Performance Discussion","Educational Commentary"],summary:"This author has shared a range of viewpoints on various topics. On the topic of evaluation and feedback, they share the belief that objective evaluation is important, but delivering feedback can be difficult. According to the author, good feedback should be immediate and specific, with a mix of positive and negative feedback. They also suggest that teachers/professors, particularly those who are pre-med, make courses difficult to weed out the weak and find the best students. The author is not completely convinced of technology's ability to replace in-person instructors or if it can impact educational systems effectively. They believe that new technologies need to be developed to make personalized education and AI tutors scalable solutions. Regarding statistics education, the author thinks that although some basic concepts can be taught without calculus, a proper statistics course requires calculus background. Finally, they propose some thought-provoking questions about what we want from higher caliber teachers and suggest that curriculum development should be centralized.",id:"leaf948",children:[]},{count:17,medianLikes:12,avgLikes:16.6,maxLikes:99,commentRms:17.7,titles:["Education Reform Comments","Education Policy Discussion","Education Reform Debate","Education Reform Ideas","Education Policy Discourse"],summary:'This author expresses a variety of views on education reform, primarily focused on cost optimization and student outcomes. They support income sharing agreements (ISAs) over student loans to incentivize education institutes to ensure student success. They also suggest limiting borrowing to a degree\'s expected earnings to counteract exploitative programs. Additionally, they advocate for reinstating the gainful employment test and expanding it beyond just for-profit institutions. The author also cites criticism of the effectiveness of educational interventions in improving student outcomes, and suggests a greater focus on income redistribution to address inequality. They also propose universal school choice as a way to de-escalate the culture war surrounding education. Finally, the author advocates for greater emphasis on maintaining classroom order and addressing disruptive behavior, even suggesting "benevolent colonialism" as a means to do so.',id:"leaf977",children:[]},{count:25,medianLikes:8,avgLikes:16.9,maxLikes:94,commentRms:19.7,titles:["Tech Layoffs and Employment","Tech Layoffs and Labor Market","Tech Industry Commentary","Tech Labor Market Dynamics","Tech Layoffs and Employment"],summary:"The author of these comments expresses several main viewpoints. Firstly, they believe that the recent tech layoffs are simply a correction to the extreme hiring binge of tech companies during the pandemic. There was a massive increase in demand for tech services which led to aggressive hiring, but this hope was dashed as tech usage normalized. However, despite the layoffs, the economic impact and employee count of these companies still exceed pre-pandemic levels.\n\nSecondly, the author discusses the reluctance of tech companies to fire engineers for performance reasons. Engineers are expensive to hire and onboard, possess valuable differential tribal knowledge, and are almost always a positive contribution to the team. Therefore, there is no reason to manage out low performers unless the firm runs into cash flow issues.\n\nLastly, the author discusses their viewpoint on public sector unions. They express concern about their resistance to the expansion of charter schools and their tendency to work with the political system to secure excessive profits in a parasitic, rent-seeking fashion. The author believes unions function best when they compete against other firms, as seen in the German model, instead of undermining competition.",id:"leaf986",children:[]}]}]}]}]}),Kn=zn("#tree-container").append("svg").attr("height",800).style("cursor","crosshair"),Zn="translate(89.0252, 647.519) scale(0.812252, 0.812252)",Jn=Kn.append("g").attr("transform",Zn),Qn=function(){var e=_n,t=1,n=1,i=null;function a(a){var h=function(e){for(var t,n,i,a,o,s=new Dn(e,0),r=[s];t=r.pop();)if(i=t._.children)for(t.children=new Array(o=i.length),a=o-1;a>=0;--a)r.push(n=t.children[a]=new Dn(i[a],a)),n.parent=t;return(s.parent=new Dn(null,0)).children=[s],s}(a);if(h.eachAfter(o),h.parent.m=-h.z,h.eachBefore(s),i)a.eachBefore(r);else{var c=a,l=a,u=a;a.eachBefore((function(e){e.x<c.x&&(c=e),e.x>l.x&&(l=e),e.depth>u.depth&&(u=e)}));var d=c===l?1:e(c,l)/2,m=d-c.x,f=t/(l.x+d+m),p=n/(u.depth||1);a.eachBefore((function(e){e.x=(e.x+m)*f,e.y=e.depth*p}))}return a}function o(t){var n=t.children,i=t.parent.children,a=t.i?i[t.i-1]:null;if(n){!function(e){for(var t,n=0,i=0,a=e.children,o=a.length;--o>=0;)(t=a[o]).z+=n,t.m+=n,n+=t.s+(i+=t.c)}(t);var o=(n[0].z+n[n.length-1].z)/2;a?(t.z=a.z+e(t._,a._),t.m=t.z-o):t.z=o}else a&&(t.z=a.z+e(t._,a._));t.parent.A=function(t,n,i){if(n){for(var a,o=t,s=t,r=n,h=o.parent.children[0],c=o.m,l=s.m,u=r.m,d=h.m;r=Ln(r),o=An(o),r&&o;)h=An(h),(s=Ln(s)).a=t,(a=r.z+u-o.z-c+e(r._,o._))>0&&(Cn(Sn(r,t,i),t,a),c+=a,l+=a),u+=r.m,c+=o.m,d+=h.m,l+=s.m;r&&!Ln(s)&&(s.t=r,s.m+=u-l),o&&!An(h)&&(h.t=o,h.m+=c-d,i=t)}return i}(t,a,t.parent.A||i[0])}function s(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function r(e){e.x*=t,e.y=e.depth*n}return a.separation=function(t){return arguments.length?(e=t,a):e},a.size=function(e){return arguments.length?(i=!1,t=+e[0],n=+e[1],a):i?null:[t,n]},a.nodeSize=function(e){return arguments.length?(i=!0,t=+e[0],n=+e[1],a):i?[t,n]:null},a}().size([1800,800]).nodeSize([40,400]);function ei(){const e=window.innerWidth,t=.75*window.innerHeight;Kn.attr("width",e),Kn.attr("height",Math.min(t,800))}ei(),window.addEventListener("resize",(()=>{ei(),vi()}));let ti=vn(Yn,(e=>e.getChildren())),ni=Qn(ti);function ii(){return Jn.selectAll(".link").data(ni.descendants().slice(1))}function ai(){return Jn.selectAll(".node").data(ni.descendants())}function oi(e){return e.enter().append("path")}function si(e){return e.enter().append("g")}function ri(e){return e.style("stroke","#666").style("stroke-width",3).attr("fill","none").attr("class","link").attr("opacity",(e=>e.data.visible?.25:0)).attr("d",(e=>{const t=e.parent;if(!t)throw new Error("Parent is null");return"M"+e.y+","+e.x+"C"+(e.y+t.y)/2+","+e.x+" "+(e.y+t.y)/2+","+t.x+" "+t.y+","+t.x}))}function hi(e){return e.attr("class","node").attr("transform",(e=>"translate("+e.y+","+e.x+")"))}function ci(e){return e.append("circle")}function li(e){return 3*Math.pow(e.data.count,.4)}function ui(e){return e.attr("r",(e=>li(e))).attr("fill",(e=>e.data.children.length>0?"#00a67d":"#e9950c")).attr("opacity",(e=>e.data.visible?1:0)).attr("stroke",(e=>e.data.selected?"#df3079":"#666")).attr("stroke-width",(e=>e.data.selected?3:1)).on("click",((e,t)=>{e.ctrlKey?(console.log(`Clicked w/ Control ${t.data.titles[0]} ${t.data.visible}}`),t.data.toggleChildrenVisible(),vi()):(console.log(`Bare clicked ${t.data.titles[0]} ${t.data.visible}}`),_i(t.data),Yn.visit((e=>e.selected=!1)),t.data.selected=!0,vi())}))}function di(e){return e.append("text")}function mi(e){return e.text((e=>e.data.titles[0])).attr("transform",(e=>`translate(${1.2*li(e)},5)`)).attr("opacity",(e=>e.data.visible?1:0))}let fi=ri(oi(ii())),pi=hi(si(ai())),gi=ui(ci(pi)),yi=mi(di(pi));function vi(){console.log("update"),ti=vn(Yn,(e=>e.getChildren())),ni=Qn(ti);const e=ri(oi(ii()).merge(fi));e.exit().remove(),fi=e;const t=si(ai()),n=hi(t.merge(pi));n.exit().remove(),pi=n;const i=ui(ci(t).merge(gi));i.exit().remove(),gi=i;const a=mi(di(t).merge(yi));a.exit().remove(),yi=a}const wi=document.getElementById("node-stats"),bi=document.getElementById("node-titles"),ki=document.getElementById("node-summary");function Ti(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function xi(e){const t=document.createElement("li");return t.innerText=e,t}function _i(e){if(null!==wi){Ti(wi);const t=100*e.count/Yn.count;wi.appendChild(xi(`${t.toFixed(1)}% of comments`)),wi.appendChild(xi(`${e.medianLikes} median likes`)),wi.appendChild(xi(`${e.avgLikes} average likes`)),wi.appendChild(xi(`${e.maxLikes} max likes`)),wi.appendChild(xi(`${e.commentRms} semantic breadth`))}if(null!==bi){Ti(bi);for(const t of e.titles){const e=document.createElement("li");e.innerText=t,bi.appendChild(e)}}null!==ki&&(Ti(ki),e.summary.split(/\n+/).forEach((e=>{const t=document.createElement("p");t.innerText=e,ki.appendChild(t)})))}_i(Yn),Yn.selected=!0,vi();const Ai=function(){var e,t,n,i=Vn,a=Hn,o=Wn,s=Gn,r=Xn,h=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],l=250,u=En,d=ye("start","zoom","end"),m=500,f=150,p=0,g=10;function y(e){e.property("__zoom",jn).on("wheel.zoom",_,{passive:!1}).on("mousedown.zoom",A).on("dblclick.zoom",L).filter(r).on("touchstart.zoom",C).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",D).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function v(e,t){return(t=Math.max(h[0],Math.min(h[1],t)))===e.k?e:new Bn(t,e.x,e.y)}function w(e,t,n){var i=t[0]-n[0]*e.k,a=t[1]-n[1]*e.k;return i===e.x&&a===e.y?e:new Bn(e.k,i,a)}function b(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function k(e,t,n,i){e.on("start.zoom",(function(){T(this,arguments).event(i).start()})).on("interrupt.zoom end.zoom",(function(){T(this,arguments).event(i).end()})).tween("zoom",(function(){var e=this,o=arguments,s=T(e,o).event(i),r=a.apply(e,o),h=null==n?b(r):"function"==typeof n?n.apply(e,o):n,c=Math.max(r[1][0]-r[0][0],r[1][1]-r[0][1]),l=e.__zoom,d="function"==typeof t?t.apply(e,o):t,m=u(l.invert(h).concat(c/l.k),d.invert(h).concat(c/d.k));return function(e){if(1===e)e=d;else{var t=m(e),n=c/t[2];e=new Bn(n,h[0]-t[0]*n,h[1]-t[1]*n)}s.zoom(null,e)}}))}function T(e,t,n){return!n&&e.__zooming||new x(e,t)}function x(e,t){this.that=e,this.args=t,this.active=0,this.sourceEvent=null,this.extent=a.apply(e,t),this.taps=0}function _(e,...t){if(i.apply(this,arguments)){var n=T(this,t).event(e),a=this.__zoom,r=Math.max(h[0],Math.min(h[1],a.k*Math.pow(2,s.apply(this,arguments)))),l=Fn(e);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=a.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(a.k===r)return;n.mouse=[l,a.invert(l)],Ge(this),n.start()}$n(e),n.wheel=setTimeout((function(){n.wheel=null,n.end()}),f),n.zoom("mouse",o(w(v(a,r),n.mouse[0],n.mouse[1]),n.extent,c))}}function A(e,...t){if(!n&&i.apply(this,arguments)){var a=e.currentTarget,s=T(this,t,!0).event(e),r=zn(e.view).on("mousemove.zoom",(function(e){if($n(e),!s.moved){var t=e.clientX-l,n=e.clientY-u;s.moved=t*t+n*n>p}s.event(e).zoom("mouse",o(w(s.that.__zoom,s.mouse[0]=Fn(e,a),s.mouse[1]),s.extent,c))}),!0).on("mouseup.zoom",(function(e){r.on("mousemove.zoom mouseup.zoom",null),function(e,t){var n=e.document.documentElement,i=zn(e).on("dragstart.drag",null);t&&(i.on("click.drag",Rn,Mn),setTimeout((function(){i.on("click.drag",null)}),0)),"onselectstart"in n?i.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(e.view,s.moved),$n(e),s.event(e).end()}),!0),h=Fn(e,a),l=e.clientX,u=e.clientY;!function(e){var t=e.document.documentElement,n=zn(e).on("dragstart.drag",Rn,Mn);"onselectstart"in t?n.on("selectstart.drag",Rn,Mn):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}(e.view),On(e),s.mouse=[h,this.__zoom.invert(h)],Ge(this),s.start()}}function L(e,...t){if(i.apply(this,arguments)){var n=this.__zoom,s=Fn(e.changedTouches?e.changedTouches[0]:e,this),r=n.invert(s),h=n.k*(e.shiftKey?.5:2),u=o(w(v(n,h),s,r),a.apply(this,t),c);$n(e),l>0?zn(this).transition().duration(l).call(k,u,s,e):zn(this).call(y.transform,u,s,e)}}function C(n,...a){if(i.apply(this,arguments)){var o,s,r,h,c=n.touches,l=c.length,u=T(this,a,n.changedTouches.length===l).event(n);for(On(n),s=0;s<l;++s)h=[h=Fn(r=c[s],this),this.__zoom.invert(h),r.identifier],u.touch0?u.touch1||u.touch0[2]===h[2]||(u.touch1=h,u.taps=0):(u.touch0=h,o=!0,u.taps=1+!!e);e&&(e=clearTimeout(e)),o&&(u.taps<2&&(t=h[0],e=setTimeout((function(){e=null}),m)),Ge(this),u.start())}}function S(e,...t){if(this.__zooming){var n,i,a,s,r=T(this,t).event(e),h=e.changedTouches,l=h.length;for($n(e),n=0;n<l;++n)a=Fn(i=h[n],this),r.touch0&&r.touch0[2]===i.identifier?r.touch0[0]=a:r.touch1&&r.touch1[2]===i.identifier&&(r.touch1[0]=a);if(i=r.that.__zoom,r.touch1){var u=r.touch0[0],d=r.touch0[1],m=r.touch1[0],f=r.touch1[1],p=(p=m[0]-u[0])*p+(p=m[1]-u[1])*p,g=(g=f[0]-d[0])*g+(g=f[1]-d[1])*g;i=v(i,Math.sqrt(p/g)),a=[(u[0]+m[0])/2,(u[1]+m[1])/2],s=[(d[0]+f[0])/2,(d[1]+f[1])/2]}else{if(!r.touch0)return;a=r.touch0[0],s=r.touch0[1]}r.zoom("touch",o(w(i,a,s),r.extent,c))}}function D(e,...i){if(this.__zooming){var a,o,s=T(this,i).event(e),r=e.changedTouches,h=r.length;for(On(e),n&&clearTimeout(n),n=setTimeout((function(){n=null}),m),a=0;a<h;++a)o=r[a],s.touch0&&s.touch0[2]===o.identifier?delete s.touch0:s.touch1&&s.touch1[2]===o.identifier&&delete s.touch1;if(s.touch1&&!s.touch0&&(s.touch0=s.touch1,delete s.touch1),s.touch0)s.touch0[1]=this.__zoom.invert(s.touch0[0]);else if(s.end(),2===s.taps&&(o=Fn(o,this),Math.hypot(t[0]-o[0],t[1]-o[1])<g)){var c=zn(this).on("dblclick.zoom");c&&c.apply(this,arguments)}}}return y.transform=function(e,t,n,i){var a=e.selection?e.selection():e;a.property("__zoom",jn),e!==a?k(e,t,n,i):a.interrupt().each((function(){T(this,arguments).event(i).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},y.scaleBy=function(e,t,n,i){y.scaleTo(e,(function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)}),n,i)},y.scaleTo=function(e,t,n,i){y.transform(e,(function(){var e=a.apply(this,arguments),i=this.__zoom,s=null==n?b(e):"function"==typeof n?n.apply(this,arguments):n,r=i.invert(s),h="function"==typeof t?t.apply(this,arguments):t;return o(w(v(i,h),s,r),e,c)}),n,i)},y.translateBy=function(e,t,n,i){y.transform(e,(function(){return o(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),a.apply(this,arguments),c)}),null,i)},y.translateTo=function(e,t,n,i,s){y.transform(e,(function(){var e=a.apply(this,arguments),s=this.__zoom,r=null==i?b(e):"function"==typeof i?i.apply(this,arguments):i;return o(Nn.translate(r[0],r[1]).scale(s.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,c)}),i,s)},x.prototype={event:function(e){return e&&(this.sourceEvent=e),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){var t=zn(this.that).datum();d.call(e,this.that,new qn(e,{sourceEvent:this.sourceEvent,target:y,type:e,transform:this.that.__zoom,dispatch:d}),t)}},y.wheelDelta=function(e){return arguments.length?(s="function"==typeof e?e:Pn(+e),y):s},y.filter=function(e){return arguments.length?(i="function"==typeof e?e:Pn(!!e),y):i},y.touchable=function(e){return arguments.length?(r="function"==typeof e?e:Pn(!!e),y):r},y.extent=function(e){return arguments.length?(a="function"==typeof e?e:Pn([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),y):a},y.scaleExtent=function(e){return arguments.length?(h[0]=+e[0],h[1]=+e[1],y):[h[0],h[1]]},y.translateExtent=function(e){return arguments.length?(c[0][0]=+e[0][0],c[1][0]=+e[1][0],c[0][1]=+e[0][1],c[1][1]=+e[1][1],y):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},y.constrain=function(e){return arguments.length?(o=e,y):o},y.duration=function(e){return arguments.length?(l=+e,y):l},y.interpolate=function(e){return arguments.length?(u=e,y):u},y.on=function(){var e=d.on.apply(d,arguments);return e===d?y:e},y.clickDistance=function(e){return arguments.length?(p=(e=+e)*e,y):Math.sqrt(p)},y.tapDistance=function(e){return arguments.length?(g=+e,y):g},y}().on("zoom",(e=>{Jn.attr("transform",Zn+e.transform.toString())}));Kn.call(Ai)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,