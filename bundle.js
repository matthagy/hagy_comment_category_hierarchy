(()=>{"use strict";function t(){}function n(n){return null==n?t:function(){return this.querySelector(n)}}function e(){return[]}function r(t){return null==t?e:function(){return this.querySelectorAll(t)}}function i(t){return function(){return this.matches(t)}}function o(t){return function(n){return n.matches(t)}}var a=Array.prototype.find;function u(){return this.firstElementChild}var s=Array.prototype.filter;function l(){return Array.from(this.children)}function c(t){return new Array(t.length)}function h(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function f(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new h(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function p(t,n,e,r,i,o,a){var u,s,l,c=new Map,f=n.length,p=o.length,d=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(d[u]=l=a.call(s,s.__data__,u,n)+"",c.has(l)?i[u]=s:c.set(l,s));for(u=0;u<p;++u)l=a.call(t,o[u],u,o)+"",(s=c.get(l))?(r[u]=s,s.__data__=o[u],c.delete(l)):e[u]=new h(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&c.get(d[u])===s&&(i[u]=s)}function d(t){return t.__data__}function m(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function v(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}h.prototype={constructor:h,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var y="http://www.w3.org/1999/xhtml";const g={svg:"http://www.w3.org/2000/svg",xhtml:y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function _(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),g.hasOwnProperty(n)?{space:g[n],local:t}:t}function w(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function b(t,n){return function(){this.setAttribute(t,n)}}function k(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function A(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function M(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function E(t){return function(){this.style.removeProperty(t)}}function $(t,n,e){return function(){this.style.setProperty(t,n,e)}}function N(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function C(t,n){return t.style.getPropertyValue(n)||M(t).getComputedStyle(t,null).getPropertyValue(n)}function S(t){return function(){delete this[t]}}function T(t,n){return function(){this[t]=n}}function B(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function P(t){return t.trim().split(/^|\s+/)}function X(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=P(t.getAttribute("class")||"")}function L(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function R(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Y(t){return function(){L(this,t)}}function I(t){return function(){R(this,t)}}function O(t,n){return function(){(n.apply(this,arguments)?L:R)(this,t)}}function V(){this.textContent=""}function j(t){return function(){this.textContent=t}}function D(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function H(){this.innerHTML=""}function U(t){return function(){this.innerHTML=t}}function G(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function K(){this.nextSibling&&this.parentNode.appendChild(this)}function F(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function W(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===y&&n.documentElement.namespaceURI===y?n.createElement(t):n.createElementNS(e,t)}}function Q(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function J(t){var n=_(t);return(n.local?Q:W)(n)}function Z(){return null}function tt(){var t=this.parentNode;t&&t.removeChild(this)}function nt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function et(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function rt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function it(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function ot(t,n,e){var r=M(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function at(t,n){return function(){return ot(this,t,n)}}function ut(t,n){return function(){return ot(this,t,n.apply(this,arguments))}}q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var st=[null];function lt(t,n){this._groups=t,this._parents=n}function ct(){return new lt([[document.documentElement]],st)}lt.prototype=ct.prototype={constructor:lt,select:function(t){"function"!=typeof t&&(t=n(t));for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o)for(var a,u,s=e[o],l=s.length,c=i[o]=new Array(l),h=0;h<l;++h)(a=s[h])&&(u=t.call(a,a.__data__,h,s))&&("__data__"in a&&(u.__data__=a.__data__),c[h]=u);return new lt(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(n=t.apply(this,arguments))?[]:Array.isArray(n)?n:Array.from(n);var n}}(t):r(t);for(var n=this._groups,e=n.length,i=[],o=[],a=0;a<e;++a)for(var u,s=n[a],l=s.length,c=0;c<l;++c)(u=s[c])&&(i.push(t.call(u,u.__data__,c,s)),o.push(u));return new lt(i,o)},selectChild:function(t){return this.select(null==t?u:function(t){return function(){return a.call(this.children,t)}}("function"==typeof t?t:o(t)))},selectChildren:function(t){return this.selectAll(null==t?l:function(t){return function(){return s.call(this.children,t)}}("function"==typeof t?t:o(t)))},filter:function(t){"function"!=typeof t&&(t=i(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=r[o]=[],c=0;c<s;++c)(a=u[c])&&t.call(a,a.__data__,c,u)&&l.push(a);return new lt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,d);var e,r=n?p:f,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],v=o[c],y=v.length,g=m(t.call(h,h&&h.__data__,c,i)),_=g.length,w=s[c]=new Array(_),x=u[c]=new Array(_);r(h,v,w,x,l[c]=new Array(y),g,n);for(var b,k,A=0,z=0;A<_;++A)if(b=w[A]){for(A>=z&&(z=A+1);!(k=x[z])&&++z<_;);b._next=k||null}}return(u=new lt(u,i))._enter=s,u._exit=l,u},enter:function(){return new lt(this._enter||this._groups.map(c),this._parents)},exit:function(){return new lt(this._exit||this._groups.map(c),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),s=0;s<a;++s)for(var l,c=e[s],h=r[s],f=c.length,p=u[s]=new Array(f),d=0;d<f;++d)(l=c[d]||h[d])&&(p[d]=l);for(;s<i;++s)u[s]=e[s];return new lt(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=v);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new lt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=_(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?x:w:"function"==typeof n?e.local?z:A:e.local?k:b)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?E:"function"==typeof n?N:$)(t,n,null==e?"":e)):C(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?S:"function"==typeof n?B:T)(t,n)):this.node()[t]},classed:function(t,n){var e=P(t+"");if(arguments.length<2){for(var r=X(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?O:n?Y:I)(e,n))},text:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?D:j)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?H:("function"==typeof t?G:U)(t)):this.node().innerHTML},raise:function(){return this.each(K)},lower:function(){return this.each(F)},append:function(t){var n="function"==typeof t?t:J(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,e){var r="function"==typeof t?t:J(t),i=null==e?Z:"function"==typeof e?e:n(e);return this.select((function(){return this.insertBefore(r.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(tt)},clone:function(t){return this.select(t?et:nt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?it:rt,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?ut:at)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const ht=ct;var ft={value:()=>{}};function pt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new dt(r)}function dt(t){this._=t}function mt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function vt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ft,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}dt.prototype=pt.prototype={constructor:dt,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=vt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=vt(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=mt(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new dt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const yt=pt;var gt,_t,wt=0,xt=0,bt=0,kt=1e3,At=0,zt=0,Mt=0,Et="object"==typeof performance&&performance.now?performance:Date,$t="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Nt(){return zt||($t(Ct),zt=Et.now()+Mt)}function Ct(){zt=0}function St(){this._call=this._time=this._next=null}function Tt(t,n,e){var r=new St;return r.restart(t,n,e),r}function Bt(){zt=(At=Et.now())+Mt,wt=xt=0;try{!function(){Nt(),++wt;for(var t,n=gt;n;)(t=zt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--wt}()}finally{wt=0,function(){for(var t,n,e=gt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:gt=n);_t=t,Xt(r)}(),zt=0}}function Pt(){var t=Et.now(),n=t-At;n>kt&&(Mt-=n,At=t)}function Xt(t){wt||(xt&&(xt=clearTimeout(xt)),t-zt>24?(t<1/0&&(xt=setTimeout(Bt,t-Et.now()-Mt)),bt&&(bt=clearInterval(bt))):(bt||(At=Et.now(),bt=setInterval(Pt,kt)),wt=1,$t(Bt)))}function qt(t,n,e){var r=new St;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}St.prototype=Tt.prototype={constructor:St,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Nt():+e)+(null==n?0:+n),this._next||_t===this||(_t?_t._next=this:gt=this,_t=this),this._call=t,this._time=e,Xt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Xt())}};var Lt=yt("start","end","cancel","interrupt"),Rt=[],Yt=0,It=2,Ot=3,Vt=5,jt=6;function Dt(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,h,f;if(1!==e.state)return u();for(l in i)if((f=i[l]).name===e.name){if(f.state===Ot)return qt(o);4===f.state?(f.state=jt,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=jt,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(qt((function(){e.state===Ot&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=It,e.on.call("start",t,t.__data__,e.index,e.group),e.state===It){for(e.state=Ot,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Vt,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===Vt&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=jt,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Tt((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Lt,tween:Rt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Yt})}function Ht(t,n){var e=Gt(t,n);if(e.state>Yt)throw new Error("too late; already scheduled");return e}function Ut(t,n){var e=Gt(t,n);if(e.state>Ot)throw new Error("too late; already running");return e}function Gt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Kt(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>It&&e.state<Vt,e.state=jt,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function Ft(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Wt,Qt=180/Math.PI,Jt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Zt(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Qt,skewX:Math.atan(s)*Qt,scaleX:a,scaleY:u}}function tn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Ft(t,i)},{i:s-2,x:Ft(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ft(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ft(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Ft(t,e)},{i:u-2,x:Ft(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var nn=tn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Jt:Zt(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),en=tn((function(t){return null==t?Jt:(Wt||(Wt=document.createElementNS("http://www.w3.org/2000/svg","g")),Wt.setAttribute("transform",t),(t=Wt.transform.baseVal.consolidate())?Zt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Jt)}),", ",")",")");function rn(t,n){var e,r;return function(){var i=Ut(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function on(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Ut(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}}function an(t,n,e){var r=t._id;return t.each((function(){var t=Ut(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Gt(t,r).value[n]}}function un(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function sn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ln(){}var cn=.7,hn=1/cn,fn="\\s*([+-]?\\d+)\\s*",pn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",dn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",mn=/^#([0-9a-f]{3,8})$/,vn=new RegExp(`^rgb\\(${fn},${fn},${fn}\\)$`),yn=new RegExp(`^rgb\\(${dn},${dn},${dn}\\)$`),gn=new RegExp(`^rgba\\(${fn},${fn},${fn},${pn}\\)$`),_n=new RegExp(`^rgba\\(${dn},${dn},${dn},${pn}\\)$`),wn=new RegExp(`^hsl\\(${pn},${dn},${dn}\\)$`),xn=new RegExp(`^hsla\\(${pn},${dn},${dn},${pn}\\)$`),bn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function kn(){return this.rgb().formatHex()}function An(){return this.rgb().formatRgb()}function zn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=mn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Mn(n):3===e?new Nn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?En(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?En(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=vn.exec(t))?new Nn(n[1],n[2],n[3],1):(n=yn.exec(t))?new Nn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=gn.exec(t))?En(n[1],n[2],n[3],n[4]):(n=_n.exec(t))?En(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=wn.exec(t))?Xn(n[1],n[2]/100,n[3]/100,1):(n=xn.exec(t))?Xn(n[1],n[2]/100,n[3]/100,n[4]):bn.hasOwnProperty(t)?Mn(bn[t]):"transparent"===t?new Nn(NaN,NaN,NaN,0):null}function Mn(t){return new Nn(t>>16&255,t>>8&255,255&t,1)}function En(t,n,e,r){return r<=0&&(t=n=e=NaN),new Nn(t,n,e,r)}function $n(t,n,e,r){return 1===arguments.length?((i=t)instanceof ln||(i=zn(i)),i?new Nn((i=i.rgb()).r,i.g,i.b,i.opacity):new Nn):new Nn(t,n,e,null==r?1:r);var i}function Nn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Cn(){return`#${Pn(this.r)}${Pn(this.g)}${Pn(this.b)}`}function Sn(){const t=Tn(this.opacity);return`${1===t?"rgb(":"rgba("}${Bn(this.r)}, ${Bn(this.g)}, ${Bn(this.b)}${1===t?")":`, ${t})`}`}function Tn(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function Bn(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Pn(t){return((t=Bn(t))<16?"0":"")+t.toString(16)}function Xn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Ln(t,n,e,r)}function qn(t){if(t instanceof Ln)return new Ln(t.h,t.s,t.l,t.opacity);if(t instanceof ln||(t=zn(t)),!t)return new Ln;if(t instanceof Ln)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new Ln(a,u,s,t.opacity)}function Ln(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Rn(t){return(t=(t||0)%360)<0?t+360:t}function Yn(t){return Math.max(0,Math.min(1,t||0))}function In(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function On(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}un(ln,zn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:kn,formatHex:kn,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return qn(this).formatHsl()},formatRgb:An,toString:An}),un(Nn,$n,sn(ln,{brighter(t){return t=null==t?hn:Math.pow(hn,t),new Nn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?cn:Math.pow(cn,t),new Nn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Nn(Bn(this.r),Bn(this.g),Bn(this.b),Tn(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Cn,formatHex:Cn,formatHex8:function(){return`#${Pn(this.r)}${Pn(this.g)}${Pn(this.b)}${Pn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Sn,toString:Sn})),un(Ln,(function(t,n,e,r){return 1===arguments.length?qn(t):new Ln(t,n,e,null==r?1:r)}),sn(ln,{brighter(t){return t=null==t?hn:Math.pow(hn,t),new Ln(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?cn:Math.pow(cn,t),new Ln(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Nn(In(t>=240?t-240:t+120,i,r),In(t,i,r),In(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Ln(Rn(this.h),Yn(this.s),Yn(this.l),Tn(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=Tn(this.opacity);return`${1===t?"hsl(":"hsla("}${Rn(this.h)}, ${100*Yn(this.s)}%, ${100*Yn(this.l)}%${1===t?")":`, ${t})`}`}}));const Vn=t=>()=>t;function jn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Vn(isNaN(t)?n:t)}const Dn=function t(n){var e=function(t){return 1==(t=+t)?jn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Vn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=$n(t)).r,(n=$n(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=jn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Hn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=$n(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Hn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return On((e-r/n)*n,a,i,o,u)}})),Hn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return On((e-r/n)*n,i,o,a,u)}}));var Un=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Gn=new RegExp(Un.source,"g");function Kn(t,n){var e,r,i,o=Un.lastIndex=Gn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Un.exec(t))&&(r=Gn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Ft(e,r)})),o=Gn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function Fn(t,n){var e;return("number"==typeof n?Ft:n instanceof zn?Dn:(e=zn(n))?(n=e,Dn):Kn)(t,n)}function Wn(t){return function(){this.removeAttribute(t)}}function Qn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Jn(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Zn(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function te(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function ne(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function ee(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}(t,i)),e}return i._value=n,i}function re(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ie(t,n){return function(){Ht(this,t).delay=+n.apply(this,arguments)}}function oe(t,n){return n=+n,function(){Ht(this,t).delay=n}}function ae(t,n){return function(){Ut(this,t).duration=+n.apply(this,arguments)}}function ue(t,n){return n=+n,function(){Ut(this,t).duration=n}}var se=ht.prototype.constructor;function le(t){return function(){this.style.removeProperty(t)}}var ce=0;function he(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function fe(){return++ce}var pe=ht.prototype;he.prototype=function(t){return ht().transition(t)}.prototype={constructor:he,select:function(t){var e=this._name,r=this._id;"function"!=typeof t&&(t=n(t));for(var i=this._groups,o=i.length,a=new Array(o),u=0;u<o;++u)for(var s,l,c=i[u],h=c.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=c[p])&&(l=t.call(s,s.__data__,p,c))&&("__data__"in s&&(l.__data__=s.__data__),f[p]=l,Dt(f[p],e,r,p,f,Gt(s,r)));return new he(a,this._parents,e,r)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=r(t));for(var i=this._groups,o=i.length,a=[],u=[],s=0;s<o;++s)for(var l,c=i[s],h=c.length,f=0;f<h;++f)if(l=c[f]){for(var p,d=t.call(l,l.__data__,f,c),m=Gt(l,e),v=0,y=d.length;v<y;++v)(p=d[v])&&Dt(p,n,e,v,d,m);a.push(d),u.push(l)}return new he(a,u,n,e)},selectChild:pe.selectChild,selectChildren:pe.selectChildren,filter:function(t){"function"!=typeof t&&(t=i(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=r[o]=[],c=0;c<s;++c)(a=u[c])&&t.call(a,a.__data__,c,u)&&l.push(a);return new he(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],h=l.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=l[p]||c[p])&&(f[p]=s);for(;u<r;++u)a[u]=n[u];return new he(a,this._parents,this._name,this._id)},selection:function(){return new se(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=fe(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=Gt(a,n);Dt(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new he(r,this._parents,t,e)},call:pe.call,nodes:pe.nodes,node:pe.node,size:pe.size,empty:pe.empty,each:pe.each,on:function(t,n){var e=this._id;return arguments.length<2?Gt(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Ht:Ut;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=_(t),r="transform"===e?en:Fn;return this.attrTween(t,"function"==typeof n?(e.local?ne:te)(e,r,an(this,"attr."+t,n)):null==n?(e.local?Qn:Wn)(e):(e.local?Zn:Jn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=_(t);return this.tween(e,(r.local?ee:re)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?nn:Fn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=C(this,t),a=(this.style.removeProperty(t),C(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,le(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=C(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=C(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,an(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=Ut(this,t),l=s.on,c=null==s.value[a]?o||(o=le(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=C(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(an(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,function(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&function(t){return function(n){this.textContent=t.call(this,n)}}(r)),n}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Gt(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?rn:on)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ie:oe)(n,t)):Gt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ae:ue)(n,t)):Gt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Ut(this,t).ease=n}}(n,t)):Gt(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Ut(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=Ut(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:pe[Symbol.iterator]};var de={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function me(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}ht.prototype.interrupt=function(t){return this.each((function(){Kt(this,t)}))},ht.prototype.transition=function(t){var n,e;t instanceof he?(n=t._id,t=t._name):(n=fe(),(e=de).time=Nt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&Dt(a,t,n,l,u,e||me(a,n));return new he(r,this._parents,t,n)};const{abs:ve,max:ye,min:ge}=Math;function _e(t){return{type:t}}function we(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function xe(t,n){t instanceof Map?(t=[void 0,t],void 0===n&&(n=ke)):void 0===n&&(n=be);for(var e,r,i,o,a,u=new Me(t),s=[u];e=s.pop();)if((i=n(e.data))&&(a=(i=Array.from(i)).length))for(e.children=i,o=a-1;o>=0;--o)s.push(r=i[o]=new Me(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(ze)}function be(t){return t.children}function ke(t){return Array.isArray(t)?t[1]:null}function Ae(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function ze(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Me(t){this.data=t,this.depth=this.height=0,this.parent=null}function Ee(t,n){return t.parent===n.parent?1:2}function $e(t){var n=t.children;return n?n[0]:t.t}function Ne(t){var n=t.children;return n?n[n.length-1]:t.t}function Ce(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Se(t,n,e){return t.a.parent===n.parent?t.a:e}function Te(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function Be(t){return"string"==typeof t?new lt([[document.querySelector(t)]],[document.documentElement]):new lt([[t]],st)}["w","e"].map(_e),["n","s"].map(_e),["n","w","e","s","nw","ne","sw","se"].map(_e),Me.prototype=xe.prototype={constructor:Me,count:function(){return this.eachAfter(we)},each:function(t,n){let e=-1;for(const r of this)t.call(n,r,++e,this);return this},eachAfter:function(t,n){for(var e,r,i,o=this,a=[o],u=[],s=-1;o=a.pop();)if(u.push(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r]);for(;o=u.pop();)t.call(n,o,++s,this);return this},eachBefore:function(t,n){for(var e,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(n,i,++a,this),e=i.children)for(r=e.length-1;r>=0;--r)o.push(e[r]);return this},find:function(t,n){let e=-1;for(const r of this)if(t.call(n,r,++e,this))return r},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return xe(this).eachBefore(Ae)},[Symbol.iterator]:function*(){var t,n,e,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e])}while(o.length)}},Te.prototype=Object.create(Me.prototype);const Pe={capture:!0,passive:!1};function Xe(t){t.preventDefault(),t.stopImmediatePropagation()}function qe(t){return((t=Math.exp(t))+1/t)/2}const Le=function t(n,e,r){function i(t,i){var o,a,u=t[0],s=t[1],l=t[2],c=i[0],h=i[1],f=i[2],p=c-u,d=h-s,m=p*p+d*d;if(m<1e-12)a=Math.log(f/l)/n,o=function(t){return[u+t*p,s+t*d,l*Math.exp(n*t*a)]};else{var v=Math.sqrt(m),y=(f*f-l*l+r*m)/(2*l*e*v),g=(f*f-l*l-r*m)/(2*f*e*v),_=Math.log(Math.sqrt(y*y+1)-y),w=Math.log(Math.sqrt(g*g+1)-g);a=(w-_)/n,o=function(t){var r,i=t*a,o=qe(_),c=l/(e*v)*(o*(r=n*i+_,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(_));return[u+c*p,s+c*d,l*o/qe(n*i+_)]}}return o.duration=1e3*a*n/Math.SQRT2,o}return i.rho=function(n){var e=Math.max(.001,+n),r=e*e;return t(e,r,r*r)},i}(Math.SQRT2,2,4);function Re(t,n){if(t=function(t){let n;for(;n=t.sourceEvent;)t=n;return t}(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}}return[t.pageX,t.pageY]}const Ye=t=>()=>t;function Ie(t,{sourceEvent:n,target:e,transform:r,dispatch:i}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:e,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:i}})}function Oe(t,n,e){this.k=t,this.x=n,this.y=e}Oe.prototype={constructor:Oe,scale:function(t){return 1===t?this:new Oe(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Oe(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Ve=new Oe(1,0,0);function je(t){t.stopImmediatePropagation()}function De(t){t.preventDefault(),t.stopImmediatePropagation()}function He(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function Ue(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function Ge(){return this.__zoom||Ve}function Ke(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function Fe(){return navigator.maxTouchPoints||"ontouchstart"in this}function We(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}Oe.prototype;class Qe{constructor(t,n,e,r,i,o,a,u,s){this.visible=!0,this.childCollapses=!1,this.selected=!1,this.id=t,this.titles=n,this.summary=e,this.count=r,this.medianLikes=i,this.avgLikes=o,this.maxLikes=a,this.commentRms=u,this.children=s}getChildren(){return this.children}toggleChildrenVisible(t){void 0===t&&(t=!this.childCollapses),this.childCollapses=t;for(const n of this.children)n.visible=!t,n.toggleChildrenVisible(t)}visit(t){t(this);for(const n of this.children)n.visit(t)}}function Je(t){var n;return new Qe(t.id,t.titles,t.summary,t.count,t.medianLikes,t.avgLikes,t.maxLikes,t.commentRms,(null!==(n=t.children)&&void 0!==n?n:[]).map(Je))}let Ze=null;function tr(){if(null===Ze)throw new Error("Top level node not initialized");return Ze}const nr=Be("#tree-container").append("svg").attr("height",800).style("cursor","crosshair"),er="translate(89.0252, 647.519) scale(0.812252, 0.812252)",rr=nr.append("g").attr("transform",er),ir=function(){var t=Ee,n=1,e=1,r=null;function i(i){var s=function(t){for(var n,e,r,i,o,a=new Te(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new Te(r[i],i)),e.parent=n;return(a.parent=new Te(null,0)).children=[a],a}(i);if(s.eachAfter(o),s.parent.m=-s.z,s.eachBefore(a),r)i.eachBefore(u);else{var l=i,c=i,h=i;i.eachBefore((function(t){t.x<l.x&&(l=t),t.x>c.x&&(c=t),t.depth>h.depth&&(h=t)}));var f=l===c?1:t(l,c)/2,p=f-l.x,d=n/(c.x+f+p),m=e/(h.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*m}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,s=o.parent.children[0],l=o.m,c=a.m,h=u.m,f=s.m;u=Ne(u),o=$e(o),u&&o;)s=$e(s),(a=Ne(a)).a=n,(i=u.z+h-o.z-l+t(u._,o._))>0&&(Ce(Se(u,n,r),n,i),l+=i,c+=i),h+=u.m,l+=o.m,f+=s.m,c+=a.m;u&&!Ne(a)&&(a.t=u,a.m+=h-c),o&&!$e(s)&&(s.t=o,s.m+=l-f,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}().size([1800,800]).nodeSize([50,400]);function or(){const t=window.innerWidth,n=.75*window.innerHeight;nr.attr("width",t),nr.attr("height",Math.min(n,800))}let ar,ur,sr,lr,cr,hr;function fr(){if(void 0===ur)throw new Error("layoutNode not initialized");return ur}function pr(t){return 4*Math.pow(t.data.count,.4)}function dr(){console.log("update"),ar=xe(tr(),(t=>t.getChildren())),ur=ir(ar);let t=function(t){return t.enter().append("path")}(rr.selectAll(".link").data(fr().descendants().slice(1)));void 0!==sr&&(t=t.merge(sr)),function(t){return t.style("stroke","#666").style("stroke-width",3).attr("fill","none").attr("class","link").attr("opacity",(t=>t.data.visible?.25:0)).attr("d",(t=>{const n=t.parent;if(!n)throw new Error("Parent is null");return"M"+t.y+","+t.x+"C"+(t.y+n.y)/2+","+t.x+" "+(t.y+n.y)/2+","+n.x+" "+n.y+","+n.x}))}(t).exit().remove(),sr=t;let n=function(t){return t.enter().append("g")}(rr.selectAll(".node").data(fr().descendants()));void 0!==lr&&(n=n.merge(lr)),function(t){return t.attr("class","node").attr("transform",(t=>"translate("+t.y+","+t.x+")"))}(n).exit().remove(),lr=n;let e=function(t){return t.append("circle")}(n);void 0!==cr&&(e=e.merge(cr)),function(t){return t.attr("r",(t=>pr(t))).attr("fill",(t=>t.data.children.length>0?"#00a67d":"#e9950c")).attr("opacity",(t=>t.data.visible?1:0)).attr("stroke",(t=>t.data.selected?"#df3079":"#666")).attr("stroke-width",(t=>t.data.selected?3:1)).on("click",((t,n)=>{t.ctrlKey?(console.log(`Clicked w/ Control ${n.data.titles[0]} ${n.data.visible}}`),n.data.toggleChildrenVisible(),dr()):(console.log(`Bare clicked ${n.data.titles[0]} ${n.data.visible}}`),wr(n.data),tr().visit((t=>t.selected=!1)),n.data.selected=!0,dr())}))}(e).exit().remove(),cr=e;let r=function(t){return t.append("text")}(n);void 0!==hr&&(r=r.merge(hr)),function(t){return t.text((t=>t.data.titles[0])).attr("transform",(t=>`translate(${1.2*pr(t)},5)`)).attr("opacity",(t=>t.data.visible?1:0))}(r).exit().remove(),hr=r}or(),window.addEventListener("resize",(()=>{or(),dr()}));const mr=document.getElementById("node-stats"),vr=document.getElementById("node-titles"),yr=document.getElementById("node-summary");function gr(t){for(;t.firstChild;)t.removeChild(t.firstChild)}function _r(t){const n=document.createElement("li");return n.innerText=t,n}function wr(t){if(null!==mr){gr(mr);const n=100*t.count/tr().count;mr.appendChild(_r(`${n.toFixed(1)}% of comments`)),mr.appendChild(_r(`${t.medianLikes} median likes`)),mr.appendChild(_r(`${t.avgLikes} average likes`)),mr.appendChild(_r(`${t.maxLikes} max likes`)),mr.appendChild(_r(`${t.commentRms} semantic breadth`))}if(null!==vr){gr(vr);for(const n of t.titles){const t=document.createElement("li");t.innerText=n,vr.appendChild(t)}}null!==yr&&(gr(yr),t.summary.split(/\n+/).forEach((t=>{const n=document.createElement("p");n.innerText=t,yr.appendChild(n)})))}fetch("static/node_data.json").then((t=>t.json())).then((t=>{console.log("fetched data"),Ze=Je(t),wr(Ze),Ze.selected=!0,ar=xe(Ze,(t=>t.getChildren())),ur=ir(ar),dr();const n=function(){var t,n,e,r=He,i=Ue,o=We,a=Ke,u=Fe,s=[0,1/0],l=[[-1/0,-1/0],[1/0,1/0]],c=250,h=Le,f=yt("start","zoom","end"),p=500,d=150,m=0,v=10;function y(t){t.property("__zoom",Ge).on("wheel.zoom",A,{passive:!1}).on("mousedown.zoom",z).on("dblclick.zoom",M).filter(u).on("touchstart.zoom",E).on("touchmove.zoom",$).on("touchend.zoom touchcancel.zoom",N).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(t,n){return(n=Math.max(s[0],Math.min(s[1],n)))===t.k?t:new Oe(n,t.x,t.y)}function _(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Oe(t.k,r,i)}function w(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function x(t,n,e,r){t.on("start.zoom",(function(){b(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){b(this,arguments).event(r).end()})).tween("zoom",(function(){var t=this,o=arguments,a=b(t,o).event(r),u=i.apply(t,o),s=null==e?w(u):"function"==typeof e?e.apply(t,o):e,l=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),c=t.__zoom,f="function"==typeof n?n.apply(t,o):n,p=h(c.invert(s).concat(l/c.k),f.invert(s).concat(l/f.k));return function(t){if(1===t)t=f;else{var n=p(t),e=l/n[2];t=new Oe(e,s[0]-n[0]*e,s[1]-n[1]*e)}a.zoom(null,t)}}))}function b(t,n,e){return!e&&t.__zooming||new k(t,n)}function k(t,n){this.that=t,this.args=n,this.active=0,this.sourceEvent=null,this.extent=i.apply(t,n),this.taps=0}function A(t,...n){if(r.apply(this,arguments)){var e=b(this,n).event(t),i=this.__zoom,u=Math.max(s[0],Math.min(s[1],i.k*Math.pow(2,a.apply(this,arguments)))),c=Re(t);if(e.wheel)e.mouse[0][0]===c[0]&&e.mouse[0][1]===c[1]||(e.mouse[1]=i.invert(e.mouse[0]=c)),clearTimeout(e.wheel);else{if(i.k===u)return;e.mouse=[c,i.invert(c)],Kt(this),e.start()}De(t),e.wheel=setTimeout((function(){e.wheel=null,e.end()}),d),e.zoom("mouse",o(_(g(i,u),e.mouse[0],e.mouse[1]),e.extent,l))}}function z(t,...n){if(!e&&r.apply(this,arguments)){var i=t.currentTarget,a=b(this,n,!0).event(t),u=Be(t.view).on("mousemove.zoom",(function(t){if(De(t),!a.moved){var n=t.clientX-c,e=t.clientY-h;a.moved=n*n+e*e>m}a.event(t).zoom("mouse",o(_(a.that.__zoom,a.mouse[0]=Re(t,i),a.mouse[1]),a.extent,l))}),!0).on("mouseup.zoom",(function(t){u.on("mousemove.zoom mouseup.zoom",null),function(t,n){var e=t.document.documentElement,r=Be(t).on("dragstart.drag",null);n&&(r.on("click.drag",Xe,Pe),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(t.view,a.moved),De(t),a.event(t).end()}),!0),s=Re(t,i),c=t.clientX,h=t.clientY;!function(t){var n=t.document.documentElement,e=Be(t).on("dragstart.drag",Xe,Pe);"onselectstart"in n?e.on("selectstart.drag",Xe,Pe):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(t.view),je(t),a.mouse=[s,this.__zoom.invert(s)],Kt(this),a.start()}}function M(t,...n){if(r.apply(this,arguments)){var e=this.__zoom,a=Re(t.changedTouches?t.changedTouches[0]:t,this),u=e.invert(a),s=e.k*(t.shiftKey?.5:2),h=o(_(g(e,s),a,u),i.apply(this,n),l);De(t),c>0?Be(this).transition().duration(c).call(x,h,a,t):Be(this).call(y.transform,h,a,t)}}function E(e,...i){if(r.apply(this,arguments)){var o,a,u,s,l=e.touches,c=l.length,h=b(this,i,e.changedTouches.length===c).event(e);for(je(e),a=0;a<c;++a)s=[s=Re(u=l[a],this),this.__zoom.invert(s),u.identifier],h.touch0?h.touch1||h.touch0[2]===s[2]||(h.touch1=s,h.taps=0):(h.touch0=s,o=!0,h.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(h.taps<2&&(n=s[0],t=setTimeout((function(){t=null}),p)),Kt(this),h.start())}}function $(t,...n){if(this.__zooming){var e,r,i,a,u=b(this,n).event(t),s=t.changedTouches,c=s.length;for(De(t),e=0;e<c;++e)i=Re(r=s[e],this),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=i:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=i);if(r=u.that.__zoom,u.touch1){var h=u.touch0[0],f=u.touch0[1],p=u.touch1[0],d=u.touch1[1],m=(m=p[0]-h[0])*m+(m=p[1]-h[1])*m,v=(v=d[0]-f[0])*v+(v=d[1]-f[1])*v;r=g(r,Math.sqrt(m/v)),i=[(h[0]+p[0])/2,(h[1]+p[1])/2],a=[(f[0]+d[0])/2,(f[1]+d[1])/2]}else{if(!u.touch0)return;i=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(_(r,i,a),u.extent,l))}}function N(t,...r){if(this.__zooming){var i,o,a=b(this,r).event(t),u=t.changedTouches,s=u.length;for(je(t),e&&clearTimeout(e),e=setTimeout((function(){e=null}),p),i=0;i<s;++i)o=u[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Re(o,this),Math.hypot(n[0]-o[0],n[1]-o[1])<v)){var l=Be(this).on("dblclick.zoom");l&&l.apply(this,arguments)}}}return y.transform=function(t,n,e,r){var i=t.selection?t.selection():t;i.property("__zoom",Ge),t!==i?x(t,n,e,r):i.interrupt().each((function(){b(this,arguments).event(r).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},y.scaleBy=function(t,n,e,r){y.scaleTo(t,(function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)}),e,r)},y.scaleTo=function(t,n,e,r){y.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=null==e?w(t):"function"==typeof e?e.apply(this,arguments):e,u=r.invert(a),s="function"==typeof n?n.apply(this,arguments):n;return o(_(g(r,s),a,u),t,l)}),e,r)},y.translateBy=function(t,n,e,r){y.transform(t,(function(){return o(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),i.apply(this,arguments),l)}),null,r)},y.translateTo=function(t,n,e,r,a){y.transform(t,(function(){var t=i.apply(this,arguments),a=this.__zoom,u=null==r?w(t):"function"==typeof r?r.apply(this,arguments):r;return o(Ve.translate(u[0],u[1]).scale(a.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,l)}),r,a)},k.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var n=Be(this.that).datum();f.call(t,this.that,new Ie(t,{sourceEvent:this.sourceEvent,target:y,type:t,transform:this.that.__zoom,dispatch:f}),n)}},y.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:Ye(+t),y):a},y.filter=function(t){return arguments.length?(r="function"==typeof t?t:Ye(!!t),y):r},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Ye(!!t),y):u},y.extent=function(t){return arguments.length?(i="function"==typeof t?t:Ye([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):i},y.scaleExtent=function(t){return arguments.length?(s[0]=+t[0],s[1]=+t[1],y):[s[0],s[1]]},y.translateExtent=function(t){return arguments.length?(l[0][0]=+t[0][0],l[1][0]=+t[1][0],l[0][1]=+t[0][1],l[1][1]=+t[1][1],y):[[l[0][0],l[0][1]],[l[1][0],l[1][1]]]},y.constrain=function(t){return arguments.length?(o=t,y):o},y.duration=function(t){return arguments.length?(c=+t,y):c},y.interpolate=function(t){return arguments.length?(h=t,y):h},y.on=function(){var t=f.on.apply(f,arguments);return t===f?y:t},y.clickDistance=function(t){return arguments.length?(m=(t=+t)*t,y):Math.sqrt(m)},y.tapDistance=function(t){return arguments.length?(v=+t,y):v},y}().on("zoom",(t=>{rr.attr("transform",er+t.transform.toString())}));nr.call(n),console.log("init finished")})).catch((t=>console.log(t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLLFlBQWF1akIsR0FDaEJqZ0IsRUFBRXlFLFVBQVU0TSxXQUFXLElBRS9CM2YsR0FBSWhCLEtBQUtxcEIsR0FDVHdJLFFBQVEzSCxJQUFJLGdCQUFnQixJQUUzQmlOLE9BQU1DLEdBQVN2RixRQUFRM0gsSUFBSWtOLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZVR3ZWVuLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZVZhcnlpbmcuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hBZnRlci5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9maW5kLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3BhdGguanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xlYXZlcy5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vaGFneV9jb21tZW50X2NhdGVnb3J5X2hpZXJhcmNoeS8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy96b29tLmpzIiwid2VicGFjazovL2hhZ3lfY29tbWVudF9jYXRlZ29yeV9oaWVyYXJjaHkvLi9pbmRleC50cyIsIndlYnBhY2s6Ly9oYWd5X2NvbW1lbnRfY2F0ZWdvcnlfaGllcmFyY2h5Ly4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQ7XG5cbmZ1bmN0aW9uIGNoaWxkRmluZChtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmQuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoaWxkRmlyc3QoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QobWF0Y2ggPT0gbnVsbCA/IGNoaWxkRmlyc3RcbiAgICAgIDogY2hpbGRGaW5kKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbHRlciA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXI7XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5GaWx0ZXIobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdEFsbChtYXRjaCA9PSBudWxsID8gY2hpbGRyZW5cbiAgICAgIDogY2hpbGRyZW5GaWx0ZXIodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IG5ldyBNYXAsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApICsgXCJcIjtcbiAgICAgIGlmIChub2RlQnlLZXlWYWx1ZS5oYXMoa2V5VmFsdWUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKSArIFwiXCI7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWUpKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZS5kZWxldGUoa2V5VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdHVtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX19kYXRhX187XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLCBkYXR1bSk7XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gYXJyYXlsaWtlKHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuXG4vLyBHaXZlbiBzb21lIGRhdGEsIHRoaXMgcmV0dXJucyBhbiBhcnJheS1saWtlIHZpZXcgb2YgaXQ6IGFuIG9iamVjdCB0aGF0XG4vLyBleHBvc2VzIGEgbGVuZ3RoIHByb3BlcnR5IGFuZCBhbGxvd3MgbnVtZXJpYyBpbmRleGluZy4gTm90ZSB0aGF0IHVubGlrZVxuLy8gc2VsZWN0QWxsLCB0aGlzIGlzbuKAmXQgd29ycmllZCBhYm91dCDigJxsaXZl4oCdIGNvbGxlY3Rpb25zIGJlY2F1c2UgdGhlIHJlc3VsdGluZ1xuLy8gYXJyYXkgd2lsbCBvbmx5IGJlIHVzZWQgYnJpZWZseSB3aGlsZSBkYXRhIGlzIGJlaW5nIGJvdW5kLiAoSXQgaXMgcG9zc2libGUgdG9cbi8vIGNhdXNlIHRoZSBkYXRhIHRvIGNoYW5nZSB3aGlsZSBpdGVyYXRpbmcgYnkgdXNpbmcgYSBrZXkgZnVuY3Rpb24sIGJ1dCBwbGVhc2Vcbi8vIGRvbuKAmXQ7IHdl4oCZZCByYXRoZXIgYXZvaWQgYSBncmF0dWl0b3VzIGNvcHkuKVxuZnVuY3Rpb24gYXJyYXlsaWtlKGRhdGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4gZGF0YVxuICAgID8gZGF0YSAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oZGF0YSk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2UuanNcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCwgdGhpcy5fX2RhdGFfXyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIodmFsdWUpO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8ub3B0aW9ucyA9IG9wdGlvbnMpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBvcHRpb25zKSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQgZnJvbSBcIi4vc2VsZWN0Q2hpbGQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4gZnJvbSBcIi4vc2VsZWN0Q2hpbGRyZW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvci5qc1wiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zZWxlY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIHNlbGVjdENoaWxkOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQsXG4gIHNlbGVjdENoaWxkcmVuOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiBzZWxlY3Rpb25fc2VsZWN0aW9uLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX2l0ZXJhdG9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGwuanNcIjtcblxuZnVuY3Rpb24gYXJyYXlBbGwoc2VsZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJyYXkoc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgPT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gYXJyYXlBbGwoc2VsZWN0KTtcbiAgZWxzZSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiLy8gR2l2ZW4gc29tZXRoaW5nIGFycmF5IGxpa2UgKG9yIG51bGwpLCByZXR1cm5zIHNvbWV0aGluZyB0aGF0IGlzIHN0cmljdGx5IGFuXG4vLyBhcnJheS4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IGFycmF5LWxpa2Ugb2JqZWN0cyBwYXNzZWQgdG8gZDMuc2VsZWN0QWxsXG4vLyBvciBzZWxlY3Rpb24uc2VsZWN0QWxsIGFyZSBjb252ZXJ0ZWQgaW50byBwcm9wZXIgYXJyYXlzIHdoZW4gY3JlYXRpbmcgYVxuLy8gc2VsZWN0aW9uOyB3ZSBkb27igJl0IGV2ZXIgd2FudCB0byBjcmVhdGUgYSBzZWxlY3Rpb24gYmFja2VkIGJ5IGEgbGl2ZVxuLy8gSFRNTENvbGxlY3Rpb24gb3IgTm9kZUxpc3QuIEhvd2V2ZXIsIG5vdGUgdGhhdCBzZWxlY3Rpb24uc2VsZWN0QWxsIHdpbGwgdXNlIGFcbi8vIHN0YXRpYyBOb2RlTGlzdCBhcyBhIGdyb3VwLCBzaW5jZSBpdCBzYWZlbHkgZGVyaXZlZCBmcm9tIHF1ZXJ5U2VsZWN0b3JBbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJheSh4KSB7XG4gIHJldHVybiB4ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkoeCkgPyB4IDogQXJyYXkuZnJvbSh4KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGlmICh0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZW50ZXIgPSBvbmVudGVyKGVudGVyKTtcbiAgICBpZiAoZW50ZXIpIGVudGVyID0gZW50ZXIuc2VsZWN0aW9uKCk7XG4gIH0gZWxzZSB7XG4gICAgZW50ZXIgPSBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICB9XG4gIGlmIChvbnVwZGF0ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgICBpZiAodXBkYXRlKSB1cGRhdGUgPSB1cGRhdGUuc2VsZWN0aW9uKCk7XG4gIH1cbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHZhciBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0O1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgbGV0IHNpemUgPSAwO1xuICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcykgKytzaXplOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qKCkge1xuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgeWllbGQgbm9kZTtcbiAgICB9XG4gIH1cbn1cbiIsInZhciBub29wID0ge3ZhbHVlOiAoKSA9PiB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbCh1bmRlZmluZWQsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBzdmdOb2RlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGNvbnN0IG0gPSBuZXcgKHR5cGVvZiBET01NYXRyaXggPT09IFwiZnVuY3Rpb25cIiA/IERPTU1hdHJpeCA6IFdlYktpdENTU01hdHJpeCkodmFsdWUgKyBcIlwiKTtcbiAgcmV0dXJuIG0uaXNJZGVudGl0eSA/IGlkZW50aXR5IDogZGVjb21wb3NlKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/KD86XFxcXGQqXFxcXC4pP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/KD86XFxcXGQqXFxcXC4pP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoYF5yZ2JcXFxcKCR7cmVJfSwke3JlSX0sJHtyZUl9XFxcXCkkYCksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChgXnJnYlxcXFwoJHtyZVB9LCR7cmVQfSwke3JlUH1cXFxcKSRgKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChgXnJnYmFcXFxcKCR7cmVJfSwke3JlSX0sJHtyZUl9LCR7cmVOfVxcXFwpJGApLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKGBecmdiYVxcXFwoJHtyZVB9LCR7cmVQfSwke3JlUH0sJHtyZU59XFxcXCkkYCksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChgXmhzbFxcXFwoJHtyZU59LCR7cmVQfSwke3JlUH1cXFxcKSRgKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChgXmhzbGFcXFxcKCR7cmVOfSwke3JlUH0sJHtyZVB9LCR7cmVOfVxcXFwpJGApO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5KGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHRoaXMuY29uc3RydWN0b3IsIHRoaXMsIGNoYW5uZWxzKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIZXg4OiBjb2xvcl9mb3JtYXRIZXg4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXg4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXg4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjbGFtcCgpIHtcbiAgICByZXR1cm4gbmV3IFJnYihjbGFtcGkodGhpcy5yKSwgY2xhbXBpKHRoaXMuZyksIGNsYW1waSh0aGlzLmIpLCBjbGFtcGEodGhpcy5vcGFjaXR5KSk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0SGV4ODogcmdiX2Zvcm1hdEhleDgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIGAjJHtoZXgodGhpcy5yKX0ke2hleCh0aGlzLmcpfSR7aGV4KHRoaXMuYil9YDtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleDgoKSB7XG4gIHJldHVybiBgIyR7aGV4KHRoaXMucil9JHtoZXgodGhpcy5nKX0ke2hleCh0aGlzLmIpfSR7aGV4KChpc05hTih0aGlzLm9wYWNpdHkpID8gMSA6IHRoaXMub3BhY2l0eSkgKiAyNTUpfWA7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIGNvbnN0IGEgPSBjbGFtcGEodGhpcy5vcGFjaXR5KTtcbiAgcmV0dXJuIGAke2EgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIn0ke2NsYW1waSh0aGlzLnIpfSwgJHtjbGFtcGkodGhpcy5nKX0sICR7Y2xhbXBpKHRoaXMuYil9JHthID09PSAxID8gXCIpXCIgOiBgLCAke2F9KWB9YDtcbn1cblxuZnVuY3Rpb24gY2xhbXBhKG9wYWNpdHkpIHtcbiAgcmV0dXJuIGlzTmFOKG9wYWNpdHkpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9wYWNpdHkpKTtcbn1cblxuZnVuY3Rpb24gY2xhbXBpKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gY2xhbXBpKHZhbHVlKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgY2xhbXAoKSB7XG4gICAgcmV0dXJuIG5ldyBIc2woY2xhbXBoKHRoaXMuaCksIGNsYW1wdCh0aGlzLnMpLCBjbGFtcHQodGhpcy5sKSwgY2xhbXBhKHRoaXMub3BhY2l0eSkpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsKCkge1xuICAgIGNvbnN0IGEgPSBjbGFtcGEodGhpcy5vcGFjaXR5KTtcbiAgICByZXR1cm4gYCR7YSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwifSR7Y2xhbXBoKHRoaXMuaCl9LCAke2NsYW1wdCh0aGlzLnMpICogMTAwfSUsICR7Y2xhbXB0KHRoaXMubCkgKiAxMDB9JSR7YSA9PT0gMSA/IFwiKVwiIDogYCwgJHthfSlgfWA7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gY2xhbXBoKHZhbHVlKSB7XG4gIHZhbHVlID0gKHZhbHVlIHx8IDApICUgMzYwO1xuICByZXR1cm4gdmFsdWUgPCAwID8gdmFsdWUgKyAzNjAgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2xhbXB0KHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWx1ZSB8fCAwKSk7XG59XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3Byb3RvdHlwZS5zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9wcm90b3R5cGUuc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZWFzZVZhcnlpbmc6IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmQsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25fcHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl1cbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VWYXJ5aW5nKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0eXBlb2YgdiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLmVhY2goZWFzZVZhcnlpbmcodGhpcy5faWQsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG5cbiAgICAvLyBUaGUgc2VsZWN0aW9uIHdhcyBlbXB0eSwgcmVzb2x2ZSBlbmQgaW1tZWRpYXRlbHlcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmFuc2l0aW9uICR7aWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtwb2ludGVyLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuY29uc3Qge2FicywgbWF4LCBtaW59ID0gTWF0aDtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIGlmIChzdmcuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgIHN2ZyA9IHN2Zy52aWV3Qm94LmJhc2VWYWw7XG4gICAgcmV0dXJuIFtbc3ZnLngsIHN2Zy55XSwgW3N2Zy54ICsgc3ZnLndpZHRoLCBzdmcueSArIHN2Zy5oZWlnaHRdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBrZXlzID0gdHJ1ZSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24sIGV2ZW50KSB7XG4gICAgaWYgKGdyb3VwLnR3ZWVuKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKGV2ZW50KSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KGV2ZW50KTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKGV2ZW50KSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoZXZlbnQpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoZXZlbnQpLmJydXNoKGV2ZW50KS5lbmQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwLCBldmVudCkge1xuICAgIGJydXNoLm1vdmUoZ3JvdXAsIG51bGwsIGV2ZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHZhciBlbWl0ID0gdGhhdC5fX2JydXNoLmVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXQgJiYgKCFjbGVhbiB8fCAhZW1pdC5jbGVhbikgPyBlbWl0IDogbmV3IEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLmNsZWFuID0gY2xlYW47XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiLCBldmVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSwgZXZlbnQsIG1vZGUpIHtcbiAgICAgIHZhciBkID0gc2VsZWN0KHRoaXMudGhhdCkuZGF0dW0oKTtcbiAgICAgIGxpc3RlbmVycy5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGlzLnRoYXQsXG4gICAgICAgIG5ldyBCcnVzaEV2ZW50KHR5cGUsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnQsXG4gICAgICAgICAgdGFyZ2V0OiBicnVzaCxcbiAgICAgICAgICBzZWxlY3Rpb246IGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pLFxuICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgZGlzcGF0Y2g6IGxpc3RlbmVyc1xuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZChldmVudCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRzID0gQXJyYXkuZnJvbShldmVudC50b3VjaGVzIHx8IFtldmVudF0sIHQgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0LmlkZW50aWZpZXI7XG4gICAgICAgICAgdCA9IHBvaW50ZXIodCwgdGhhdCk7XG4gICAgICAgICAgdC5wb2ludDAgPSB0LnNsaWNlKCk7XG4gICAgICAgICAgdC5pZGVudGlmaWVyID0gaTtcbiAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG5cbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgdmFyIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHB0cyA9IFtwb2ludHNbMF0sIHBvaW50c1sxXSB8fCBwb2ludHNbMF1dO1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1tcbiAgICAgICAgICB3MCA9IGRpbSA9PT0gWSA/IFcgOiBtaW4ocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIG4wID0gZGltID09PSBYID8gTiA6IG1pbihwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXSwgW1xuICAgICAgICAgIGUwID0gZGltID09PSBZID8gRSA6IG1heChwdHNbMF1bMF0sIHB0c1sxXVswXSksXG4gICAgICAgICAgczAgPSBkaW0gPT09IFggPyBTIDogbWF4KHB0c1swXVsxXSwgcHRzWzFdWzFdKVxuICAgICAgICBdXTtcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMSkgbW92ZShldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KGV2ZW50LCBtb2RlLm5hbWUpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoZXZlbnQpIHtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcyB8fCBbZXZlbnRdKSB7XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBwb2ludHMpXG4gICAgICAgICAgaWYgKGQuaWRlbnRpZmllciA9PT0gcC5pZGVudGlmaWVyKSBkLmN1ciA9IHBvaW50ZXIocCwgdGhhdCk7XG4gICAgICB9XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSAmJiBwb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdO1xuICAgICAgICBpZiAoYWJzKHBvaW50LmN1clswXSAtIHBvaW50WzBdKSA+IGFicyhwb2ludC5jdXJbMV0gLSBwb2ludFsxXSkpXG4gICAgICAgICAgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpXG4gICAgICAgIGlmIChwb2ludC5jdXIpIHBvaW50WzBdID0gcG9pbnQuY3VyWzBdLCBwb2ludFsxXSA9IHBvaW50LmN1clsxXTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIG1vdmUoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdLCBwb2ludDAgPSBwb2ludC5wb2ludDA7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHBvaW50c1sxXSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzBdWzBdKSksIGUxID0gbWF4KFcsIG1pbihFLCBwb2ludHNbMV1bMF0pKSwgc2lnblggPSAxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzBdWzFdKSksIHMxID0gbWF4KE4sIG1pbihTLCBwb2ludHNbMV1bMV0pKSwgc2lnblkgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBtYXgoVyAtIGUwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IG1heChOIC0gbjAsIG1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBtYXgoTiAtIHMwLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gbWF4KFcsIG1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBtYXgoVywgbWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IG1heChOLCBtaW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKGV2ZW50KSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoZXZlbnQsIG1vZGUubmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmRlZChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2gudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLmtleU1vZGlmaWVycyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gISFfLCBicnVzaCkgOiBrZXlzO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudC5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmUuanNcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXIuanNcIjtcbmltcG9ydCBub2RlX2ZpbmQgZnJvbSBcIi4vZmluZC5qc1wiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bS5qc1wiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGguanNcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnMuanNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzLmpzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzLmpzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rcy5qc1wiO1xuaW1wb3J0IG5vZGVfaXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgZGF0YSA9IFt1bmRlZmluZWQsIGRhdGFdO1xuICAgIGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSBjaGlsZHJlbiA9IG1hcENoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZHJlbiA9IG9iamVjdENoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSAoY2hpbGRzID0gQXJyYXkuZnJvbShjaGlsZHMpKS5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRzO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBjaGlsZHNbaV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIG9iamVjdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZCkgPyBkWzFdIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBpZiAobm9kZS5kYXRhLnZhbHVlICE9PSB1bmRlZmluZWQpIG5vZGUudmFsdWUgPSBub2RlLmRhdGEudmFsdWU7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIGZpbmQ6IG5vZGVfZmluZCxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5LFxuICBbU3ltYm9sLml0ZXJhdG9yXTogbm9kZV9pdGVyYXRvclxufTtcbiIsImltcG9ydCB7Tm9kZX0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4LmpzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGxheW91dCB1c2luZyBCdWNoaGVpbSBldCBhbC7igJlzIGFsZ29yaXRobS5cbiAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXG4gICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGVmdC1tb3N0LCByaWdodC1tb3N0LCBhbmQgZGVwdGgtbW9zdCBub2RlcyBmb3IgZXh0ZW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICByaWdodCA9IHJvb3QsXG4gICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXG4gIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxuICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBleGVjdXRlU2hpZnRzKHYpO1xuICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgIH1cbiAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgfVxuXG4gIC8vIFRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uIEhlcmUsIGEgbmV3IHN1YnRyZWUgaXMgY29tYmluZWQgd2l0aCB0aGVcbiAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAvLyB2ZXJ0aWNlcyB1c2VkIGZvciB0aGUgdHJhdmVyc2FscyBhcmUgdmkrLCB2aS0sIHZvLSwgYW5kIHZvKywgd2hlcmUgdGhlXG4gIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgLy8gY29udG91ciwgd2UgdXNlIHJlc3BlY3RpdmUgdmFyaWFibGVzIHNpKywgc2ktLCBzby0sIGFuZCBzbysuIFdoZW5ldmVyIHR3b1xuICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gIC8vIFNVQlRSRUUgdG8gc2hpZnQgdGhlIHN1YnRyZWUgYW5kIHByZXBhcmUgdGhlIHNoaWZ0cyBvZiBzbWFsbGVyIHN1YnRyZWVzLlxuICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICBpZiAodykge1xuICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICB2aW0gPSB3LFxuICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgc29wID0gdm9wLm0sXG4gICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgc2hpZnQ7XG4gICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgdm9wID0gbmV4dFJpZ2h0KHZvcCk7XG4gICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgfVxuICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICB9XG4gICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuICAgICAgfVxuICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICBub2RlLnggKj0gZHg7XG4gICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICB9XG5cbiAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCB0cmVlKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiB0cmVlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIHRoYXQpIHtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGF0KSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG4sIGluZGV4ID0gLTE7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSk7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGF0KSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBpbmRleCA9IC0xO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKTtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgdGhhdCkge1xuICBsZXQgaW5kZXggPSAtMTtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpIHtcbiAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGF0LCBub2RlLCArK2luZGV4LCB0aGlzKSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgeWllbGQgbm9kZTtcbiAgICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbn1cbiIsIi8vIFRoZXNlIGFyZSB0eXBpY2FsbHkgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIG5vZXZlbnQgdG8gZW5zdXJlIHRoYXQgd2UgY2FuXG4vLyBwcmV2ZW50RGVmYXVsdCBvbiB0aGUgZXZlbnQuXG5leHBvcnQgY29uc3Qgbm9ucGFzc2l2ZSA9IHtwYXNzaXZlOiBmYWxzZX07XG5leHBvcnQgY29uc3Qgbm9ucGFzc2l2ZWNhcHR1cmUgPSB7Y2FwdHVyZTogdHJ1ZSwgcGFzc2l2ZTogZmFsc2V9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbihldmVudCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJ2YXIgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHpvb21SaG8ocmhvLCByaG8yLCByaG80KSB7XG5cbiAgLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuICAvLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG4gIGZ1bmN0aW9uIHpvb20ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICAgIGksXG4gICAgICAgIFM7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhbCBjYXNlLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwICogcmhvIC8gTWF0aC5TUVJUMjtcblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgem9vbS5yaG8gPSBmdW5jdGlvbihfKSB7XG4gICAgdmFyIF8xID0gTWF0aC5tYXgoMWUtMywgK18pLCBfMiA9IF8xICogXzEsIF80ID0gXzIgKiBfMjtcbiAgICByZXR1cm4gem9vbVJobyhfMSwgXzIsIF80KTtcbiAgfTtcblxuICByZXR1cm4gem9vbTtcbn0pKE1hdGguU1FSVDIsIDIsIDQpO1xuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7XG4gIGV2ZW50ID0gc291cmNlRXZlbnQoZXZlbnQpO1xuICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSBub2RlID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgaWYgKG5vZGUpIHtcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcbiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gICAgfVxuICAgIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBbZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGxldCBzb3VyY2VFdmVudDtcbiAgd2hpbGUgKHNvdXJjZUV2ZW50ID0gZXZlbnQuc291cmNlRXZlbnQpIGV2ZW50ID0gc291cmNlRXZlbnQ7XG4gIHJldHVybiBldmVudDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFpvb21FdmVudCh0eXBlLCB7XG4gIHNvdXJjZUV2ZW50LFxuICB0YXJnZXQsXG4gIHRyYW5zZm9ybSxcbiAgZGlzcGF0Y2hcbn0pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIHR5cGU6IHt2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBzb3VyY2VFdmVudDoge3ZhbHVlOiBzb3VyY2VFdmVudCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB0YXJnZXQ6IHt2YWx1ZTogdGFyZ2V0LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRyYW5zZm9ybToge3ZhbHVlOiB0cmFuc2Zvcm0sIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgXzoge3ZhbHVlOiBkaXNwYXRjaH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxudHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX3pvb20pIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHJldHVybiBub2RlLl9fem9vbTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVab29tfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c2VsZWN0LCBwb2ludGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IFpvb21FdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHtUcmFuc2Zvcm0sIGlkZW50aXR5fSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbi8vIGV4Y2VwdCBmb3IgcGluY2gtdG8tem9vbSwgd2hpY2ggaXMgc2VudCBhcyBhIHdoZWVsK2N0cmxLZXkgZXZlbnRcbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICghZXZlbnQuY3RybEtleSB8fCBldmVudC50eXBlID09PSAnd2hlZWwnKSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgZSA9IHRoaXM7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIGlmIChlLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICAgIGUgPSBlLnZpZXdCb3guYmFzZVZhbDtcbiAgICAgIHJldHVybiBbW2UueCwgZS55XSwgW2UueCArIGUud2lkdGgsIGUueSArIGUuaGVpZ2h0XV07XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbZS53aWR0aC5iYXNlVmFsLnZhbHVlLCBlLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtlLmNsaWVudFdpZHRoLCBlLmNsaWVudEhlaWdodF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXaGVlbERlbHRhKGV2ZW50KSB7XG4gIHJldHVybiAtZXZlbnQuZGVsdGFZICogKGV2ZW50LmRlbHRhTW9kZSA9PT0gMSA/IDAuMDUgOiBldmVudC5kZWx0YU1vZGUgPyAxIDogMC4wMDIpICogKGV2ZW50LmN0cmxLZXkgPyAxMCA6IDEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29uc3RyYWluKHRyYW5zZm9ybSwgZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpIHtcbiAgdmFyIGR4MCA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMF0sXG4gICAgICBkeDEgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzBdLFxuICAgICAgZHkwID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVsxXSxcbiAgICAgIGR5MSA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFsxXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMV07XG4gIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlKFxuICAgIGR4MSA+IGR4MCA/IChkeDAgKyBkeDEpIC8gMiA6IE1hdGgubWluKDAsIGR4MCkgfHwgTWF0aC5tYXgoMCwgZHgxKSxcbiAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGNvbnN0cmFpbiA9IGRlZmF1bHRDb25zdHJhaW4sXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgc2NhbGVFeHRlbnQgPSBbMCwgSW5maW5pdHldLFxuICAgICAgdHJhbnNsYXRlRXh0ZW50ID0gW1stSW5maW5pdHksIC1JbmZpbml0eV0sIFtJbmZpbml0eSwgSW5maW5pdHldXSxcbiAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVpvb20sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGZpcnN0LFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgd2hlZWxEZWxheSA9IDE1MCxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMCxcbiAgICAgIHRhcERpc3RhbmNlID0gMTA7XG5cbiAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pXG4gICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZCwge3Bhc3NpdmU6IGZhbHNlfSlcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgIC5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcbiAgICBzZWxlY3Rpb24ucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24uaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgLmV2ZW50KGV2ZW50KVxuICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0pXG4gICAgICAgICAgLmVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHpvb20uc2NhbGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCwgZXZlbnQpIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnNjYWxlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHAsIGV2ZW50KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHAsXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBldmVudCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSwgcCwgZXZlbnQpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbihpZGVudGl0eS50cmFuc2xhdGUocDBbMF0sIHAwWzFdKS5zY2FsZSh0LmspLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IC14LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IC15LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteVxuICAgICAgKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgaykpO1xuICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgIHZhciB4ID0gcDBbMF0gLSBwMVswXSAqIHRyYW5zZm9ybS5rLCB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybS5rO1xuICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpIHtcbiAgICB0cmFuc2l0aW9uXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5ldmVudChldmVudCkuc3RhcnQoKTsgfSlcbiAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5ldmVudChldmVudCkuZW5kKCk7IH0pXG4gICAgICAgIC50d2VlbihcInpvb21cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICBnID0gZ2VzdHVyZSh0aGF0LCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBwb2ludCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcG9pbnQgPT09IFwiZnVuY3Rpb25cIiA/IHBvaW50LmFwcGx5KHRoYXQsIGFyZ3MpIDogcG9pbnQsXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fem9vbWluZykgfHwgbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBHZXN0dXJlKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuc291cmNlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIHRoaXMudGFwcyA9IDA7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkgdGhpcy5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLnRoYXQuX196b29taW5nID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHpvb206IGZ1bmN0aW9uKGtleSwgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDEgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gxWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMVswXSk7XG4gICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRoYXQuX196b29taW5nO1xuICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBkID0gc2VsZWN0KHRoaXMudGhhdCkuZGF0dW0oKTtcbiAgICAgIGxpc3RlbmVycy5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGlzLnRoYXQsXG4gICAgICAgIG5ldyBab29tRXZlbnQodHlwZSwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiB0aGlzLnNvdXJjZUV2ZW50LFxuICAgICAgICAgIHRhcmdldDogem9vbSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHRyYW5zZm9ybTogdGhpcy50aGF0Ll9fem9vbSxcbiAgICAgICAgICBkaXNwYXRjaDogbGlzdGVuZXJzXG4gICAgICAgIH0pLFxuICAgICAgICBkXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB3aGVlbGVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgdC5rICogTWF0aC5wb3coMiwgd2hlZWxEZWx0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkpLFxuICAgICAgICBwID0gcG9pbnRlcihldmVudCk7XG5cbiAgICAvLyBJZiB0aGUgbW91c2UgaXMgaW4gdGhlIHNhbWUgbG9jYXRpb24gYXMgYmVmb3JlLCByZXVzZSBpdC5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgaWYgKGcud2hlZWwpIHtcbiAgICAgIGlmIChnLm1vdXNlWzBdWzBdICE9PSBwWzBdIHx8IGcubW91c2VbMF1bMV0gIT09IHBbMV0pIHtcbiAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChnLndoZWVsKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIHdoZWVsIGV2ZW50IHdvbuKAmXQgdHJpZ2dlciBhIHRyYW5zZm9ybSBjaGFuZ2UsIGlnbm9yZSBpdC5cbiAgICBlbHNlIGlmICh0LmsgPT09IGspIHJldHVybjtcblxuICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICBlbHNlIHtcbiAgICAgIGcubW91c2UgPSBbcCwgdC5pbnZlcnQocCldO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cblxuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG5cbiAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgZyA9IGdlc3R1cmUodGhpcywgYXJncywgdHJ1ZSkuZXZlbnQoZXZlbnQpLFxuICAgICAgICB2ID0gc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLnpvb21cIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLnpvb21cIiwgbW91c2V1cHBlZCwgdHJ1ZSksXG4gICAgICAgIHAgPSBwb2ludGVyKGV2ZW50LCBjdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgeDAgPSBldmVudC5jbGllbnRYLFxuICAgICAgICB5MCA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XG4gICAgaW50ZXJydXB0KHRoaXMpO1xuICAgIGcuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoZXZlbnQpIHtcbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSB4MCwgZHkgPSBldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgIGcubW92ZWQgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgICAgfVxuICAgICAgZy5ldmVudChldmVudClcbiAgICAgICAuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IHBvaW50ZXIoZXZlbnQsIGN1cnJlbnRUYXJnZXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoZXZlbnQpIHtcbiAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBnLmV2ZW50KGV2ZW50KS5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICBwMCA9IHBvaW50ZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50LCB0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmdzKSwgdHJhbnNsYXRlRXh0ZW50KTtcblxuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCwgZXZlbnQpO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxLCBwMCwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLFxuICAgICAgICBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzLCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPT09IG4pLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgc3RhcnRlZCwgaSwgdCwgcDtcblxuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gcG9pbnRlcih0LCB0aGlzKTtcbiAgICAgIHAgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApLCB0LmlkZW50aWZpZXJdO1xuICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwLCBzdGFydGVkID0gdHJ1ZSwgZy50YXBzID0gMSArICEhdG91Y2hzdGFydGluZztcbiAgICAgIGVsc2UgaWYgKCFnLnRvdWNoMSAmJiBnLnRvdWNoMFsyXSAhPT0gcFsyXSkgZy50b3VjaDEgPSBwLCBnLnRhcHMgPSAwO1xuICAgIH1cblxuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuXG4gICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIGlmIChnLnRhcHMgPCAyKSB0b3VjaGZpcnN0ID0gcFswXSwgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSBwb2ludGVyKHQsIHRoaXMpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcblxuICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQ7XG5cbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICB9XG4gICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xuICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO1xuICAgIGVsc2Uge1xuICAgICAgZy5lbmQoKTtcbiAgICAgIC8vIElmIHRoaXMgd2FzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICAgIGlmIChnLnRhcHMgPT09IDIpIHtcbiAgICAgICAgdCA9IHBvaW50ZXIodCwgdGhpcyk7XG4gICAgICAgIGlmIChNYXRoLmh5cG90KHRvdWNoZmlyc3RbMF0gLSB0WzBdLCB0b3VjaGZpcnN0WzFdIC0gdFsxXSkgPCB0YXBEaXN0YW5jZSkge1xuICAgICAgICAgIHZhciBwID0gc2VsZWN0KHRoaXMpLm9uKFwiZGJsY2xpY2suem9vbVwiKTtcbiAgICAgICAgICBpZiAocCkgcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgem9vbS53aGVlbERlbHRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdoZWVsRGVsdGEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgem9vbSkgOiB3aGVlbERlbHRhO1xuICB9O1xuXG4gIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICB6b29tLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gIH07XG5cbiAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZUV4dGVudFswXSA9ICtfWzBdLCBzY2FsZUV4dGVudFsxXSA9ICtfWzFdLCB6b29tKSA6IFtzY2FsZUV4dGVudFswXSwgc2NhbGVFeHRlbnRbMV1dO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZUV4dGVudFswXVswXSA9ICtfWzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMF0gPSArX1sxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdID0gK19bMF1bMV0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbdHJhbnNsYXRlRXh0ZW50WzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV1dLCBbdHJhbnNsYXRlRXh0ZW50WzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB6b29tLmNvbnN0cmFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb25zdHJhaW4gPSBfLCB6b29tKSA6IGNvbnN0cmFpbjtcbiAgfTtcblxuICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XG4gIH07XG5cbiAgem9vbS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHpvb20pIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgem9vbS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gIH07XG5cbiAgem9vbS5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCB6b29tKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgem9vbS50YXBEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXBEaXN0YW5jZSA9ICtfLCB6b29tKSA6IHRhcERpc3RhbmNlO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgJy4vbWFpbi5jc3MnO1xuY2xhc3MgTm9kZSB7XG4gICAgY29uc3RydWN0b3IoaWQsIHRpdGxlcywgc3VtbWFyeSwgY291bnQsIG1lZGlhbkxpa2VzLCBhdmdMaWtlcywgbWF4TGlrZXMsIGNvbW1lbnRSbXMsIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hpbGRDb2xsYXBzZXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudGl0bGVzID0gdGl0bGVzO1xuICAgICAgICB0aGlzLnN1bW1hcnkgPSBzdW1tYXJ5O1xuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMubWVkaWFuTGlrZXMgPSBtZWRpYW5MaWtlcztcbiAgICAgICAgdGhpcy5hdmdMaWtlcyA9IGF2Z0xpa2VzO1xuICAgICAgICB0aGlzLm1heExpa2VzID0gbWF4TGlrZXM7XG4gICAgICAgIHRoaXMuY29tbWVudFJtcyA9IGNvbW1lbnRSbXM7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgZ2V0Q2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuOyAvLy5maWx0ZXIoYyA9PiBjLnZpc2libGUpO1xuICAgIH1cbiAgICB0b2dnbGVDaGlsZHJlblZpc2libGUoY29sbGFwc2UpIHtcbiAgICAgICAgaWYgKGNvbGxhcHNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbGxhcHNlID0gIXRoaXMuY2hpbGRDb2xsYXBzZXM7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgdG9nZ2xlQ2hpbGRyZW5WaXNpYmxlICR7dGhpcy50aXRsZX0gY29sbGFwc2U9JHtjb2xsYXBzZX0gdmlzaWJsZT0ke3RoaXMudmlzaWJsZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkQ29sbGFwc2VzID0gY29sbGFwc2U7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQudmlzaWJsZSA9ICFjb2xsYXBzZTtcbiAgICAgICAgICAgIGNoaWxkLnRvZ2dsZUNoaWxkcmVuVmlzaWJsZShjb2xsYXBzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmlzaXQodmlzaXRvcikge1xuICAgICAgICB2aXNpdG9yKHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNoaWxkLnZpc2l0KHZpc2l0b3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTm9kZShkYXRhKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBuZXcgTm9kZShkYXRhLmlkLCBkYXRhLnRpdGxlcywgZGF0YS5zdW1tYXJ5LCBkYXRhLmNvdW50LCBkYXRhLm1lZGlhbkxpa2VzLCBkYXRhLmF2Z0xpa2VzLCBkYXRhLm1heExpa2VzLCBkYXRhLmNvbW1lbnRSbXMsICgoX2EgPSBkYXRhLmNoaWxkcmVuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkubWFwKGNyZWF0ZU5vZGUpKTtcbn1cbmxldCB0b3BMZXZlbE5vZGUgPSBudWxsOyAvLyA9IGNyZWF0ZU5vZGUobm9kZV9kYXRhKTtcbmZ1bmN0aW9uIGdldFRvcExldmVsTm9kZSgpIHtcbiAgICBpZiAodG9wTGV2ZWxOb2RlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvcCBsZXZlbCBub2RlIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvcExldmVsTm9kZTtcbn1cbmNvbnN0IHdpZHRoID0gMTgwMDtcbmNvbnN0IGhlaWdodCA9IDgwMDtcbmNvbnN0IHN2ZyA9IGQzXG4gICAgLnNlbGVjdChcIiN0cmVlLWNvbnRhaW5lclwiKVxuICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAvLyAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgIC8vICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFstd2lkdGggLyAyLCAtaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodF0pXG4gICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuY29uc3QgaW5pdGlhbFpvb21UcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZSg4OS4wMjUyLCA2NDcuNTE5KSBzY2FsZSgwLjgxMjI1MiwgMC44MTIyNTIpXCI7XG5jb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBpbml0aWFsWm9vbVRyYW5zZm9ybSk7XG5jb25zdCB0cmVlTGF5b3V0ID0gZDMudHJlZSgpXG4gICAgLnNpemUoW3dpZHRoLCBoZWlnaHRdKVxuICAgIC5ub2RlU2l6ZShbNTAsIDQwMF0pO1xuZnVuY3Rpb24gdXBkYXRlU3ZnU2l6ZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNvbnN0IGN1ckhlaWdodCA9IDAuNzUgKiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCk7XG4gICAgc3ZnLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5taW4oY3VySGVpZ2h0LCBoZWlnaHQpKTtcbiAgICAvL3N2Zy5hdHRyKFwidmlld0JveFwiLCBbLXdpZHRoIC8gMiwgLWhlaWdodCAvIDIsIHdpZHRoLCBoZWlnaHRdKTtcbiAgICAvLyB0cmVlTGF5b3V0LnNpemUoW3dpZHRoLCBoZWlnaHRdKTtcbn1cbnVwZGF0ZVN2Z1NpemUoKTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHtcbiAgICB1cGRhdGVTdmdTaXplKCk7XG4gICAgdXBkYXRlKCk7XG59KTtcbmxldCByb290Tm9kZTsgLy8gZDMuaGllcmFyY2h5KHRvcExldmVsTm9kZSwgZCA9PiBkLmdldENoaWxkcmVuKCkpO1xubGV0IGxheW91dE5vZGU7IC8vID0gdHJlZUxheW91dChyb290Tm9kZSk7XG5mdW5jdGlvbiBnZXRMYXlvdXROb2RlKCkge1xuICAgIGlmIChsYXlvdXROb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibGF5b3V0Tm9kZSBub3QgaW5pdGlhbGl6ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBsYXlvdXROb2RlO1xufVxuZnVuY3Rpb24gc2VsZWN0TGlua3MoKSB7XG4gICAgcmV0dXJuIGcuc2VsZWN0QWxsKFwiLmxpbmtcIilcbiAgICAgICAgLmRhdGEoZ2V0TGF5b3V0Tm9kZSgpLmRlc2NlbmRhbnRzKCkuc2xpY2UoMSkpO1xufVxuZnVuY3Rpb24gc2VsZWN0Tm9kZXMoKSB7XG4gICAgcmV0dXJuIGdcbiAgICAgICAgLnNlbGVjdEFsbChcIi5ub2RlXCIpXG4gICAgICAgIC5kYXRhKGdldExheW91dE5vZGUoKS5kZXNjZW5kYW50cygpKTtcbn1cbmZ1bmN0aW9uIGxpbmtBcHBlbmQoc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicGF0aFwiKTtcbn1cbmZ1bmN0aW9uIG5vZGVBcHBlbmQoc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKTtcbn1cbmZ1bmN0aW9uIGxpbmtTdHlsZShzZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiM2NjZcIilcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDMpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLy8uYXR0cihcInJcIiwgMylcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtcIilcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGQgPT4gZC5kYXRhLnZpc2libGUgPyAwLjI1IDogMClcbiAgICAgICAgLmF0dHIoXCJkXCIsIGQgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBkLnBhcmVudDtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmVudCBpcyBudWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIk1cIiArIGQueSArIFwiLFwiICsgZC54XG4gICAgICAgICAgICArIFwiQ1wiICsgKGQueSArIHBhcmVudC55KSAvIDIgKyBcIixcIiArIGQueFxuICAgICAgICAgICAgKyBcIiBcIiArIChkLnkgKyBwYXJlbnQueSkgLyAyICsgXCIsXCIgKyBwYXJlbnQueFxuICAgICAgICAgICAgKyBcIiBcIiArIHBhcmVudC55ICsgXCIsXCIgKyBwYXJlbnQueDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG5vZGVTdHlsZShzZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gXCJ0cmFuc2xhdGUoXCIgKyBkLnkgKyBcIixcIiArIGQueCArIFwiKVwiKTtcbn1cbmZ1bmN0aW9uIG5vZGVTaGFwZUFwcGVuZChzZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uXG4gICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIik7XG59XG5mdW5jdGlvbiBub2RlUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gNCAqIE1hdGgucG93KGQuZGF0YS5jb3VudCwgMC40KTtcbn1cbmZ1bmN0aW9uIG5vZGVTaGFwZVN0eWxlKHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzZWxlY3Rpb25cbiAgICAgICAgLmF0dHIoXCJyXCIsIGQgPT4gbm9kZVJhZGl1cyhkKSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGQgPT4gZC5kYXRhLmNoaWxkcmVuLmxlbmd0aCA+IDAgPyBcIiMwMGE2N2RcIiA6IFwiI2U5OTUwY1wiKVxuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZCA9PiBkLmRhdGEudmlzaWJsZSA/IDEgOiAwKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBkID0+IGQuZGF0YS5zZWxlY3RlZCA/IFwiI2RmMzA3OVwiIDogXCIjNjY2XCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIGQgPT4gZC5kYXRhLnNlbGVjdGVkID8gMyA6IDEpXG4gICAgICAgIC5vbihcImNsaWNrXCIsIChlLCBkKSA9PiB7XG4gICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDbGlja2VkIHcvIENvbnRyb2wgJHtkLmRhdGEudGl0bGVzWzBdfSAke2QuZGF0YS52aXNpYmxlfX1gKTtcbiAgICAgICAgICAgIGQuZGF0YS50b2dnbGVDaGlsZHJlblZpc2libGUoKTtcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEJhcmUgY2xpY2tlZCAke2QuZGF0YS50aXRsZXNbMF19ICR7ZC5kYXRhLnZpc2libGV9fWApO1xuICAgICAgICAgICAgZGlzcGxheU5vZGVJbmZvKGQuZGF0YSk7XG4gICAgICAgICAgICBnZXRUb3BMZXZlbE5vZGUoKS52aXNpdChub2RlID0+IG5vZGUuc2VsZWN0ZWQgPSBmYWxzZSk7XG4gICAgICAgICAgICBkLmRhdGEuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG5vZGVUZXh0QXBwZW5kKHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzZWxlY3Rpb25cbiAgICAgICAgLmFwcGVuZChcInRleHRcIik7XG59XG5mdW5jdGlvbiBub2RlVGV4dFN0eWxlKHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzZWxlY3Rpb25cbiAgICAgICAgLnRleHQoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGQuZGF0YS50aXRsZXNbMF07XG4gICAgfSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZCA9PiBgdHJhbnNsYXRlKCR7MS4yICogbm9kZVJhZGl1cyhkKX0sNSlgKVxuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZCA9PiBkLmRhdGEudmlzaWJsZSA/IDEgOiAwKTtcbn1cbmxldCBleGlzdGluZ0xpbms7IC8vID0gbGlua1N0eWxlKGxpbmtBcHBlbmQoc2VsZWN0TGlua3MoKSkpO1xubGV0IGV4aXN0aW5nTm9kZTsgLy8gPSBub2RlU3R5bGUobm9kZUFwcGVuZChzZWxlY3ROb2RlcygpKSk7XG5sZXQgZXhpc3RpbmdOb2RlU2hhcGU7IC8vID0gbm9kZVNoYXBlU3R5bGUobm9kZVNoYXBlQXBwZW5kKGV4aXN0aW5nTm9kZSkpO1xubGV0IGV4aXN0aW5nTm9kZVRleHQ7IC8vID0gbm9kZVRleHRTdHlsZShub2RlVGV4dEFwcGVuZChleGlzdGluZ05vZGUpKTtcbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcInVwZGF0ZVwiKTtcbiAgICByb290Tm9kZSA9IGQzLmhpZXJhcmNoeShnZXRUb3BMZXZlbE5vZGUoKSwgZCA9PiBkLmdldENoaWxkcmVuKCkpO1xuICAgIGxheW91dE5vZGUgPSB0cmVlTGF5b3V0KHJvb3ROb2RlKTtcbiAgICBsZXQgbmV3TGlua3MgPSBsaW5rQXBwZW5kKHNlbGVjdExpbmtzKCkpO1xuICAgIGlmIChleGlzdGluZ0xpbmsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdMaW5rcyA9IG5ld0xpbmtzLm1lcmdlKGV4aXN0aW5nTGluayk7XG4gICAgfVxuICAgIGxpbmtTdHlsZShuZXdMaW5rcykuZXhpdCgpLnJlbW92ZSgpO1xuICAgIGV4aXN0aW5nTGluayA9IG5ld0xpbmtzO1xuICAgIGxldCBuZXdOb2RlID0gbm9kZUFwcGVuZChzZWxlY3ROb2RlcygpKTtcbiAgICBpZiAoZXhpc3RpbmdOb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUubWVyZ2UoZXhpc3RpbmdOb2RlKTtcbiAgICB9XG4gICAgbm9kZVN0eWxlKG5ld05vZGUpLmV4aXQoKS5yZW1vdmUoKTtcbiAgICBleGlzdGluZ05vZGUgPSBuZXdOb2RlO1xuICAgIGxldCBuZXdOb2RlU2hhcGUgPSBub2RlU2hhcGVBcHBlbmQobmV3Tm9kZSk7XG4gICAgaWYgKGV4aXN0aW5nTm9kZVNoYXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Tm9kZVNoYXBlID0gbmV3Tm9kZVNoYXBlLm1lcmdlKGV4aXN0aW5nTm9kZVNoYXBlKTtcbiAgICB9XG4gICAgbm9kZVNoYXBlU3R5bGUobmV3Tm9kZVNoYXBlKS5leGl0KCkucmVtb3ZlKCk7XG4gICAgZXhpc3RpbmdOb2RlU2hhcGUgPSBuZXdOb2RlU2hhcGU7XG4gICAgbGV0IG5ld05vZGVUZXh0ID0gbm9kZVRleHRBcHBlbmQobmV3Tm9kZSk7XG4gICAgaWYgKGV4aXN0aW5nTm9kZVRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdOb2RlVGV4dCA9IG5ld05vZGVUZXh0Lm1lcmdlKGV4aXN0aW5nTm9kZVRleHQpO1xuICAgIH1cbiAgICBub2RlVGV4dFN0eWxlKG5ld05vZGVUZXh0KS5leGl0KCkucmVtb3ZlKCk7XG4gICAgZXhpc3RpbmdOb2RlVGV4dCA9IG5ld05vZGVUZXh0O1xufVxuY29uc3Qgc3RhdHNMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2RlLXN0YXRzXCIpO1xuY29uc3QgcG9zc2libGVUaXRsZXNMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2RlLXRpdGxlc1wiKTtcbmNvbnN0IG5vZGVTdW1tYXJ5RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2RlLXN1bW1hcnlcIik7XG5mdW5jdGlvbiByZW1vdmVDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTGkodGV4dCkge1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGxpLmlubmVyVGV4dCA9IHRleHQ7XG4gICAgcmV0dXJuIGxpO1xufVxuZnVuY3Rpb24gZGlzcGxheU5vZGVJbmZvKG5vZGUpIHtcbiAgICBpZiAoc3RhdHNMaXN0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKHN0YXRzTGlzdCk7XG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSAxMDAgKiBub2RlLmNvdW50IC8gZ2V0VG9wTGV2ZWxOb2RlKCkuY291bnQ7XG4gICAgICAgIHN0YXRzTGlzdC5hcHBlbmRDaGlsZChjcmVhdGVMaShgJHtwZXJjZW50LnRvRml4ZWQoMSl9JSBvZiBjb21tZW50c2ApKTtcbiAgICAgICAgc3RhdHNMaXN0LmFwcGVuZENoaWxkKGNyZWF0ZUxpKGAke25vZGUubWVkaWFuTGlrZXN9IG1lZGlhbiBsaWtlc2ApKTtcbiAgICAgICAgc3RhdHNMaXN0LmFwcGVuZENoaWxkKGNyZWF0ZUxpKGAke25vZGUuYXZnTGlrZXN9IGF2ZXJhZ2UgbGlrZXNgKSk7XG4gICAgICAgIHN0YXRzTGlzdC5hcHBlbmRDaGlsZChjcmVhdGVMaShgJHtub2RlLm1heExpa2VzfSBtYXggbGlrZXNgKSk7XG4gICAgICAgIHN0YXRzTGlzdC5hcHBlbmRDaGlsZChjcmVhdGVMaShgJHtub2RlLmNvbW1lbnRSbXN9IHNlbWFudGljIGJyZWFkdGhgKSk7XG4gICAgfVxuICAgIGlmIChwb3NzaWJsZVRpdGxlc0xpc3QgIT09IG51bGwpIHtcbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4ocG9zc2libGVUaXRsZXNMaXN0KTtcbiAgICAgICAgZm9yIChjb25zdCB0aXRsZSBvZiBub2RlLnRpdGxlcykge1xuICAgICAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICBsaS5pbm5lclRleHQgPSB0aXRsZTtcbiAgICAgICAgICAgIHBvc3NpYmxlVGl0bGVzTGlzdC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGVTdW1tYXJ5RGl2ICE9PSBudWxsKSB7XG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKG5vZGVTdW1tYXJ5RGl2KTtcbiAgICAgICAgbm9kZS5zdW1tYXJ5LnNwbGl0KC9cXG4rLykuZm9yRWFjaChwYXJhZ3JhcGggPT4ge1xuICAgICAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgcC5pbm5lclRleHQgPSBwYXJhZ3JhcGg7XG4gICAgICAgICAgICBub2RlU3VtbWFyeURpdi5hcHBlbmRDaGlsZChwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZmV0Y2goXCJzdGF0aWMvbm9kZV9kYXRhLmpzb25cIilcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJmZXRjaGVkIGRhdGFcIik7XG4gICAgdG9wTGV2ZWxOb2RlID0gY3JlYXRlTm9kZShkYXRhKTtcbiAgICBkaXNwbGF5Tm9kZUluZm8odG9wTGV2ZWxOb2RlKTtcbiAgICB0b3BMZXZlbE5vZGUuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIHJvb3ROb2RlID0gZDMuaGllcmFyY2h5KHRvcExldmVsTm9kZSwgZCA9PiBkLmdldENoaWxkcmVuKCkpO1xuICAgIGxheW91dE5vZGUgPSB0cmVlTGF5b3V0KHJvb3ROb2RlKTtcbiAgICB1cGRhdGUoKTtcbiAgICAvLyBBZGQgem9vbSBiZWhhdmlvciB0byB0aGUgc3ZnIGVsZW1lbnRcbiAgICBjb25zdCB6b29tID0gZDNcbiAgICAgICAgLnpvb20oKVxuICAgICAgICAvLy5zY2FsZUV4dGVudChbMC41LCA1XSlcbiAgICAgICAgLy8udHJhbnNsYXRlRXh0ZW50KFtbMCwgMF0sIFt3aWR0aCwgaGVpZ2h0XV0pXG4gICAgICAgIC5vbihcInpvb21cIiwgZSA9PiB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBab29tOiAke2UudHJhbnNmb3JtfWApO1xuICAgICAgICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgaW5pdGlhbFpvb21UcmFuc2Zvcm0gK1xuICAgICAgICAgICAgZS50cmFuc2Zvcm0udG9TdHJpbmcoKSk7XG4gICAgfSk7XG4gICAgc3ZnLmNhbGwoem9vbSk7XG4gICAgY29uc29sZS5sb2coXCJpbml0IGZpbmlzaGVkXCIpO1xufSlcbiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCwge25vbnBhc3NpdmVjYXB0dXJlfSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCBub25wYXNzaXZlY2FwdHVyZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iXSwibmFtZXMiOlsibm9uZSIsInNlbGVjdG9yIiwidGhpcyIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVzIiwiY2hpbGRNYXRjaGVyIiwibm9kZSIsImZpbmQiLCJBcnJheSIsInByb3RvdHlwZSIsImNoaWxkRmlyc3QiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImZpbHRlciIsImNoaWxkcmVuIiwiZnJvbSIsInVwZGF0ZSIsImxlbmd0aCIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwib3duZXJEb2N1bWVudCIsIm5hbWVzcGFjZVVSSSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYmluZEluZGV4IiwiZ3JvdXAiLCJlbnRlciIsImV4aXQiLCJkYXRhIiwiaSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwiTWFwIiwia2V5VmFsdWVzIiwiY2FsbCIsImhhcyIsInNldCIsImdldCIsImRlbGV0ZSIsImFycmF5bGlrZSIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsIm5hbWUiLCJwcmVmaXgiLCJpbmRleE9mIiwic2xpY2UiLCJuYW1lc3BhY2VzIiwiaGFzT3duUHJvcGVydHkiLCJzcGFjZSIsImxvY2FsIiwiYXR0clJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJSZW1vdmVOUyIsImZ1bGxuYW1lIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3IiwiZG9jdW1lbnQiLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsIm4iLCJhZGQiLCJjbGFzc2VkUmVtb3ZlIiwicmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjcmVhdG9ySW5oZXJpdCIsInVyaSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJuYW1lc3BhY2UiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwibyIsImoiLCJtIiwidHlwZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJvbkFkZCIsImV2ZW50IiwiY29udGV4dExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJqb2luIiwic3BsaWNlIiwiY29udGFpbnMiLCJyb290IiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInNlbGVjdGlvbiIsInNlbGVjdCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdEFsbCIsIngiLCJpc0FycmF5IiwiYXJyYXlBbGwiLCJzZWxlY3RvckFsbCIsInNlbGVjdENoaWxkIiwibWF0Y2giLCJjaGlsZEZpbmQiLCJzZWxlY3RDaGlsZHJlbiIsImNoaWxkcmVuRmlsdGVyIiwibWF0Y2hlciIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsIm1hcCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJjb250ZXh0IiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwiTWF0aCIsIm1pbiIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsIm5vZGVzIiwic2l6ZSIsImVhY2giLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJwcm9wZXJ0eSIsImNsYXNzZWQiLCJ0ZXh0IiwiaHRtbCIsImNyZWF0ZSIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJkZWVwIiwidCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5vb3AiLCJfIiwidGVzdCIsIkVycm9yIiwiRGlzcGF0Y2giLCJjIiwiY29uY2F0IiwidHlwZXMiLCJUIiwiY29weSIsInRoYXQiLCJhcmdzIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInRpbWVvdXQiLCJpbnRlcnZhbCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsIkRhdGUiLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImYiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwiZSIsInVuZGVmaW5lZCIsInRpbWVyRmx1c2giLCJ0MCIsInQyIiwidDEiLCJJbmZpbml0eSIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJzdG9wIiwiVHlwZUVycm9yIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJDUkVBVEVEIiwiU1RBUlRJTkciLCJTVEFSVEVEIiwiRU5ESU5HIiwiRU5ERUQiLCJpZCIsImluZGV4IiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhcnQiLCJzdGF0ZSIsInRpY2siLCJkdXJhdGlvbiIsImVhc2UiLCJpbml0Iiwic2NoZWR1bGUiLCJhY3RpdmUiLCJzdmdOb2RlIiwiZGVncmVlcyIsIlBJIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZCIsInNxcnQiLCJhdGFuMiIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInBvcCIsInMiLCJxIiwieGEiLCJ5YSIsInhiIiwieWIiLCJudW1iZXIiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiRE9NTWF0cml4IiwiV2ViS2l0Q1NTTWF0cml4IiwiaXNJZGVudGl0eSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwidHJhbnNmb3JtIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJmYWN0b3J5IiwiZXh0ZW5kIiwiZGVmaW5pdGlvbiIsIk9iamVjdCIsIkNvbG9yIiwiZGFya2VyIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJjb2xvciIsImZvcm1hdCIsImwiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwib3BhY2l0eSIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwiY2xhbXBhIiwiY2xhbXBpIiwiaXNOYU4iLCJtYXgiLCJyb3VuZCIsInRvU3RyaW5nIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJjbGFtcGgiLCJjbGFtcHQiLCJoc2wycmdiIiwibTIiLCJiYXNpcyIsInYwIiwidjEiLCJ2MiIsInYzIiwidDMiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SGV4OCIsImZvcm1hdEhzbCIsImsiLCJwb3ciLCJjbGFtcCIsIm5vZ2FtbWEiLCJsaW5lYXIiLCJyZ2JHYW1tYSIsInkiLCJleHBvbmVudGlhbCIsImdhbW1hIiwiZW5kIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwidmFsdWVzIiwiZmxvb3IiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsIm9uZSIsInplcm8iLCJpbnRlcnBvbGF0ZSIsInZhbHVlMSIsInN0cmluZzAwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMSIsInN0cmluZzAiLCJzdHJpbmcxMCIsImF0dHJUd2Vlbk5TIiwiYXR0ckludGVycG9sYXRlTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJhdHRySW50ZXJwb2xhdGUiLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsIm9uMCIsIm9uMSIsInNpdCIsImV2ZXJ5Iiwib25GdW5jdGlvbiIsInN0eWxlVHdlZW4iLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwic3R5bGVJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInJlbW92ZUZ1bmN0aW9uIiwiZWFzZUNvbnN0YW50IiwiZWFzZVZhcnlpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhYnMiLCJjb3VudCIsInN1bSIsImhpZXJhcmNoeSIsIm1hcENoaWxkcmVuIiwib2JqZWN0Q2hpbGRyZW4iLCJjaGlsZHMiLCJOb2RlIiwiZGVwdGgiLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiaGVpZ2h0IiwiZGVmYXVsdFNlcGFyYXRpb24iLCJuZXh0TGVmdCIsIm5leHRSaWdodCIsIm1vdmVTdWJ0cmVlIiwid20iLCJ3cCIsInNoaWZ0IiwiY2hhbmdlIiwieiIsIm5leHRBbmNlc3RvciIsInZpbSIsImFuY2VzdG9yIiwiVHJlZU5vZGUiLCJBIiwiZWFjaEFmdGVyIiwicGF0aCIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwidGFyZ2V0IiwiY3VycmVudCIsInJldmVyc2UiLCJub25wYXNzaXZlY2FwdHVyZSIsImNhcHR1cmUiLCJwYXNzaXZlIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjb3NoIiwiZXhwIiwiem9vbVJobyIsInJobyIsInJobzIiLCJyaG80Iiwiem9vbSIsInAwIiwicDEiLCJTIiwidXgwIiwidXkwIiwidzAiLCJ1eDEiLCJ1eTEiLCJ3MSIsImR4IiwiZHkiLCJkMiIsImxvZyIsImQxIiwiYjAiLCJiMSIsInIwIiwicjEiLCJjb3NocjAiLCJ1Iiwic2luaCIsIlNRUlQyIiwiXzEiLCJfMiIsInNvdXJjZUV2ZW50IiwiY3VycmVudFRhcmdldCIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwicG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0IiwibGVmdCIsImNsaWVudExlZnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJwYWdlWCIsInBhZ2VZIiwiWm9vbUV2ZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJUcmFuc2Zvcm0iLCJhcHBseVgiLCJhcHBseVkiLCJpbnZlcnQiLCJsb2NhdGlvbiIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJkb21haW4iLCJyYW5nZSIsInJlc2NhbGVZIiwiY3RybEtleSIsImJ1dHRvbiIsIlNWR0VsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJ2aWV3Qm94Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJfX3pvb20iLCJkZWZhdWx0V2hlZWxEZWx0YSIsImRlbHRhWSIsImRlbHRhTW9kZSIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiZGVmYXVsdENvbnN0cmFpbiIsImV4dGVudCIsInRyYW5zbGF0ZUV4dGVudCIsImR4MCIsImR4MSIsImR5MCIsImR5MSIsInRpdGxlcyIsInN1bW1hcnkiLCJtZWRpYW5MaWtlcyIsImF2Z0xpa2VzIiwibWF4TGlrZXMiLCJjb21tZW50Um1zIiwidmlzaWJsZSIsImNoaWxkQ29sbGFwc2VzIiwic2VsZWN0ZWQiLCJnZXRDaGlsZHJlbiIsInRvZ2dsZUNoaWxkcmVuVmlzaWJsZSIsImNvbGxhcHNlIiwidmlzaXQiLCJ2aXNpdG9yIiwiY3JlYXRlTm9kZSIsIl9hIiwidG9wTGV2ZWxOb2RlIiwiZ2V0VG9wTGV2ZWxOb2RlIiwiaW5pdGlhbFpvb21UcmFuc2Zvcm0iLCJ0cmVlTGF5b3V0Iiwic2VwYXJhdGlvbiIsIm5vZGVTaXplIiwidHJlZSIsInRyZWVSb290IiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsInNpemVOb2RlIiwicmlnaHQiLCJib3R0b20iLCJ0eCIsImt4Iiwia3kiLCJzaWJsaW5ncyIsInciLCJleGVjdXRlU2hpZnRzIiwibWlkcG9pbnQiLCJ2aXAiLCJ2b3AiLCJ2b20iLCJzaXAiLCJzb3AiLCJzaW0iLCJzb20iLCJhcHBvcnRpb24iLCJ1cGRhdGVTdmdTaXplIiwiaW5uZXJXaWR0aCIsImN1ckhlaWdodCIsImlubmVySGVpZ2h0Iiwicm9vdE5vZGUiLCJsYXlvdXROb2RlIiwiZXhpc3RpbmdMaW5rIiwiZXhpc3RpbmdOb2RlIiwiZXhpc3RpbmdOb2RlU2hhcGUiLCJleGlzdGluZ05vZGVUZXh0IiwiZ2V0TGF5b3V0Tm9kZSIsIm5vZGVSYWRpdXMiLCJjb25zb2xlIiwibmV3TGlua3MiLCJsaW5rQXBwZW5kIiwibGlua1N0eWxlIiwibmV3Tm9kZSIsIm5vZGVBcHBlbmQiLCJub2RlU3R5bGUiLCJuZXdOb2RlU2hhcGUiLCJub2RlU2hhcGVBcHBlbmQiLCJkaXNwbGF5Tm9kZUluZm8iLCJub2RlU2hhcGVTdHlsZSIsIm5ld05vZGVUZXh0Iiwibm9kZVRleHRBcHBlbmQiLCJub2RlVGV4dFN0eWxlIiwic3RhdHNMaXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJwb3NzaWJsZVRpdGxlc0xpc3QiLCJub2RlU3VtbWFyeURpdiIsInJlbW92ZUNoaWxkcmVuIiwiZWxlbWVudCIsImNyZWF0ZUxpIiwibGkiLCJpbm5lclRleHQiLCJwZXJjZW50IiwidG9GaXhlZCIsInRpdGxlIiwiZm9yRWFjaCIsInBhcmFncmFwaCIsInAiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJ0b3VjaHN0YXJ0aW5nIiwidG91Y2hmaXJzdCIsInRvdWNoZW5kaW5nIiwiY29uc3RyYWluIiwid2hlZWxEZWx0YSIsInRvdWNoYWJsZSIsInNjYWxlRXh0ZW50IiwibGlzdGVuZXJzIiwidG91Y2hEZWxheSIsIndoZWVsRGVsYXkiLCJjbGlja0Rpc3RhbmNlMiIsInRhcERpc3RhbmNlIiwid2hlZWxlZCIsIm1vdXNlZG93bmVkIiwiZGJsY2xpY2tlZCIsInRvdWNoc3RhcnRlZCIsInRvdWNobW92ZWQiLCJ0b3VjaGVuZGVkIiwiY2VudHJvaWQiLCJnZXN0dXJlIiwiY2xlYW4iLCJfX3pvb21pbmciLCJHZXN0dXJlIiwidGFwcyIsIndoZWVsIiwibW91c2UiLCJ2aWV3IiwibW92ZWQiLCJ4MCIsInkwIiwibm9jbGljayIsIk1velVzZXJTZWxlY3QiLCJfX25vc2VsZWN0IiwiY2hhbmdlZFRvdWNoZXMiLCJrMSIsInNoaWZ0S2V5Iiwic3RhcnRlZCIsInRvdWNoZXMiLCJpZGVudGlmaWVyIiwidG91Y2gwIiwidG91Y2gxIiwibDAiLCJsMSIsImRwIiwiZGwiLCJoeXBvdCIsImNvbGxlY3Rpb24iLCJzY2FsZUJ5Iiwic2NhbGVUbyIsInRyYW5zbGF0ZUJ5IiwidHJhbnNsYXRlVG8iLCJlbWl0IiwiY2xpY2tEaXN0YW5jZSIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9